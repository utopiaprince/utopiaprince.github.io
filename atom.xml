<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>utopiaprince</title>
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2017-06-17T01:07:51.000Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>Gang.Cheng</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>stm32与at91sam9x35的can通信</title>
    <link href="http://yoursite.com/2017/06/17/stm32%E4%B8%8Eat91sam9x35%E7%9A%84can%E9%80%9A%E4%BF%A1/"/>
    <id>http://yoursite.com/2017/06/17/stm32与at91sam9x35的can通信/</id>
    <published>2017-06-17T00:28:24.000Z</published>
    <updated>2017-06-17T01:07:51.000Z</updated>
    
    <content type="html"><![CDATA[<p>stm32之间的CAN通信，有自带的HAL库，实现起来还是很方便的。at91(at91sam9x35简称)的linux上面的CAN驱动，从2.6.20开始合并到了SocketCAN，采用了套接字的方式编程，与之前有很大区别。</p>
<a id="more"></a>
<h2 id="SocketCAN"><a href="#SocketCAN" class="headerlink" title="SocketCAN"></a>SocketCAN</h2><p>首先我们查看一下at91的can设备，输入<strong>ifconfig -a</strong>，查看信息找到<strong>canX</strong>，默认at91只开启了can0（这里是逻辑设备，实际硬件开启的是can1）。</p>
<h3 id="启动-关闭can"><a href="#启动-关闭can" class="headerlink" title="启动/关闭can"></a>启动/关闭can</h3><p>在进行配置之前，都需要关闭can，配置完成以后再次开启。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">$ip link set down can0 // close</div><div class="line">$ip link set up can0   // start</div></pre></td></tr></table></figure></p>
<h3 id="查看当前can信息"><a href="#查看当前can信息" class="headerlink" title="查看当前can信息"></a>查看当前can信息</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">$ip -details link show can0</div><div class="line">can0: &lt;NOARP,UP,LOWER_UP,ECHO&gt; mtu 16 qdisc pfifo_fast state UP qlen 10 link/can</div><div class="line">      can &lt;TRIPLE-SAMPLING&gt; state ERROR-ACTIVE restart-ms 100</div><div class="line">      bitrate 400100 sample_point 0.875</div><div class="line">      tq 416 prop-seg 1 phase-seg1 2 phase-seg2 2 sjw 1</div><div class="line">      sja1000: tseg1 1..16 tseg2 1..8 sjw 1..4 brp 1..64 brp-inc 1</div><div class="line">      clock 133333333</div></pre></td></tr></table></figure>
<h3 id="设置can的波特率"><a href="#设置can的波特率" class="headerlink" title="设置can的波特率"></a>设置can的波特率</h3><p>设置波特率有2种方式，一种是直接修改bitrate，另外一种是修改计算参数。</p>
<h4 id="修改bitrate"><a href="#修改bitrate" class="headerlink" title="修改bitrate"></a>修改bitrate</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">ip link set can0 type can bitrate &lt;band&gt;</div></pre></td></tr></table></figure>
<p>这里band修改成想要的波特率。这条指令大部分的时候都是正常工作的，但是在一些少见的波特率和时钟频率，可能支持不好，误码率高。修改完以后可以用查看can指令查看。</p>
<h4 id="修改计算参数"><a href="#修改计算参数" class="headerlink" title="修改计算参数"></a>修改计算参数</h4><p>at91的datasheet里面的can章节，介绍了bitrate计算公式，我们可以算出tq、pro、seg1、seg2、sjw的具体参数，然后用指令输入：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ip link set can0 type can tq 125 prop-seg 6  phase-seg1 7 phase-seg2 2 sjw 1</div></pre></td></tr></table></figure></p>
<p>设置完以后，可以用can查看指令，查看配置以后的bitrate。</p>
<h3 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h3><p>具体的SocketCAN编程，<a href="http://blog.csdn.net/yuanlulu/article/details/7220060" target="_blank" rel="external">详细的SocketCAN中文介绍戳这里</a>。另外记得：<strong>配置完以后启动can</strong></p>
<h2 id="STM32部分"><a href="#STM32部分" class="headerlink" title="STM32部分"></a>STM32部分</h2><p>stm32的can，看数据手册，发现bitrate time只有sync，seg1，seg2，相对at91缺少prop-seg，仔细看了数据手册发现seg1包括了prop-seg部分。这样，其他部分就按照默认的配置接口。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;stm32之间的CAN通信，有自带的HAL库，实现起来还是很方便的。at91(at91sam9x35简称)的linux上面的CAN驱动，从2.6.20开始合并到了SocketCAN，采用了套接字的方式编程，与之前有很大区别。&lt;/p&gt;
    
    </summary>
    
    
      <category term="SocketCAN" scheme="http://yoursite.com/tags/SocketCAN/"/>
    
  </entry>
  
  <entry>
    <title>嵌入式ubi文件系统简介</title>
    <link href="http://yoursite.com/2017/06/15/%E5%B5%8C%E5%85%A5%E5%BC%8Fubi%E6%96%87%E4%BB%B6%E7%B3%BB%E7%BB%9F%E7%AE%80%E4%BB%8B/"/>
    <id>http://yoursite.com/2017/06/15/嵌入式ubi文件系统简介/</id>
    <published>2017-06-15T12:52:51.000Z</published>
    <updated>2017-06-17T02:33:42.000Z</updated>
    
    <content type="html"><![CDATA[<p>最近项目上用到了嵌入式linux，发现文件系统已经从熟知的yaffs2系统变成了ubi（Unsorted Block Images）系统。这里简单介绍下ubi文件系统的使用方法。</p>
<a id="more"></a>
<h2 id="配置内核支持"><a href="#配置内核支持" class="headerlink" title="配置内核支持"></a>配置内核支持</h2><p>Device Drivers  —&gt;Memory Technology Device (MTD) support  —&gt;UBI - Unsorted block images  —&gt;Enable UBI<br>配置mtd支持UBI接口</p>
<p>File systems  —&gt;Miscellaneous filesystems  —&gt;UBIFS file system support<br>配置内核支持UBIFS文件系统</p>
<h2 id="宿主机挂载ubi文件系统"><a href="#宿主机挂载ubi文件系统" class="headerlink" title="宿主机挂载ubi文件系统"></a>宿主机挂载ubi文件系统</h2><h3 id="ubifs驱动和mtd驱动"><a href="#ubifs驱动和mtd驱动" class="headerlink" title="ubifs驱动和mtd驱动"></a>ubifs驱动和mtd驱动</h3><p>挂载ubifs文件系统必须有mtd接口，而普通的pc机通常不用mtd管理磁盘，这里需要用到nandsim模拟器，用一片RAM空间模拟mtd设备，然后对ubifs文件系统挂载。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">#sudo modprobe nandsim first_id_byte=0xec second_id_byte=0xda third_id_byte=0x10 fourth_id_byte=0x95</div></pre></td></tr></table></figure></p>
<blockquote>
<p>加载NANDSIM时需要传入的4个参数时模拟目标的NANDFLASH的ID，这里我们使用三星的K9F2G08U0B，从datasheet可以查到4个字节id依次为：0xec,0xda,0x10,0x95.</p>
</blockquote>
<p>执行完可以在/dev/目录下找到mtd0和mtd0ro两个设备。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">#ls /dev |grep mtd</div><div class="line">mtd0</div><div class="line">mtd0ro</div></pre></td></tr></table></figure></p>
<h3 id="擦除mtd0分区"><a href="#擦除mtd0分区" class="headerlink" title="擦除mtd0分区"></a>擦除mtd0分区</h3><p>清除mtd0分区上的数据：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">#sudo flash_eraseall /dev/mtd0</div></pre></td></tr></table></figure></p>
<p>这里如果提示找不到flash_eraseall命令，请安装mtd-utils。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">#sudo apt-get install mtd-utils</div></pre></td></tr></table></figure></p>
<p>安装完以后在此擦除mtd0，可以看到如下信息:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">flash_eraseall has been replaced by `flash_erase &lt;mtddev&gt; 0 0`; please use it Eraseing 128Kibyte @ffe0000 -- 100% complete</div></pre></td></tr></table></figure></p>
<h3 id="导入ubi文件系统"><a href="#导入ubi文件系统" class="headerlink" title="导入ubi文件系统"></a>导入ubi文件系统</h3><p>将rootfs.ubi装入新建的mtd0分区：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">#sudo dd if=rootfs.ubi of=/dev/mtd0</div><div class="line">100864+0 records in</div><div class="line">100864+0 records out</div><div class="line">51642368 bytes (52MB) copied, 0,323111s 160MB/s</div></pre></td></tr></table></figure></p>
<h3 id="在宿主机上挂载文件系统："><a href="#在宿主机上挂载文件系统：" class="headerlink" title="在宿主机上挂载文件系统："></a>在宿主机上挂载文件系统：</h3><p>加载ubi模块，并attach到mtd0中，便可以像挂载普通mtd设备一样挂载ubifs系统。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">#sudo modprobe ubi mtd=0,2048</div></pre></td></tr></table></figure></p>
<p>如果提示：**modprobe:ERROR:could not insert ‘ubi’ invalid argument.<br>那么执行一下命令：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">#sudo apt-get install build-essential git-core libncurses5-dev u-boot-tools</div><div class="line">#sudo apt-get install flex bison texinfo zip unzip zlib1g-dev gettext</div><div class="line">#sudo apt-get install gperf libsdl2-dev</div><div class="line">#sudo apt-get install uboot-mkimage</div><div class="line">#sudo apt-get install g++ xz-utils</div></pre></td></tr></table></figure></p>
<p>再次加载ubi模块并attach到mtd0中。<br>新建一个挂载点：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">#mkdir fsmount</div></pre></td></tr></table></figure></p>
<p>挂载文件系统：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">#sudo mount -t ubifs ubi0_0 fsmount/</div><div class="line">#ls fsmount</div><div class="line">bin boot dev etc home lib media mnt proc sbin sys tmp usr var</div></pre></td></tr></table></figure></p>
<p>这样ubifs文件系统就挂载到宿主机上了。</p>
<h2 id="文件系统制作"><a href="#文件系统制作" class="headerlink" title="文件系统制作"></a>文件系统制作</h2><p>挂载好的文件系统，用户可以增添自定义程序，修改完成以后需要用mkfs.ubifs工具重新生成文件系统，首先安装mtd-utils工具:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">#sudo apt-get install mtd-utils</div></pre></td></tr></table></figure></p>
<p>输入以下命令生成新的ubifs文件系统：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">sudo mkfs.ubifs -r fsmount/ -m 2048 -e 126976 -c 2024 -o ubifs.img</div></pre></td></tr></table></figure></p>
<p>mkfs.ubifs参数说明:</p>
<ul>
<li>-r 建立文件系统的目录 </li>
<li>-m 最小的i/o传输单元</li>
<li>-e 逻辑擦除块大小</li>
<li>-c 最大的逻辑擦除块数</li>
<li>-o 指定输出文件<br>其中可以通过以下命令查看最小的IO传输单元大小和逻辑擦除块大小：<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">#ubinfo /dev/ubi0</div><div class="line">ubi0</div><div class="line">...</div><div class="line">Logic eraseblock size:                        127696 bytes, 124KiB</div><div class="line">...</div><div class="line">Minimum input/output unit size:               2048 bytes</div><div class="line">...</div></pre></td></tr></table></figure>
</li>
</ul>
<p>通过下面命令查看最大的逻辑擦除块数：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">#ubinfo /dev/ubi0_0</div><div class="line">...</div><div class="line">Size:           2024 LEBS(256999424 bytes, 245KiB)</div><div class="line">...</div></pre></td></tr></table></figure></p>
<p>然后利用ubinize工具生成fsimage.ubi文件。首先需要建立ubinize配置文件ubinize.cfg：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">#vi ubinize.cfg</div></pre></td></tr></table></figure></p>
<p>输入以下内容，保存退出：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">[ubifs]</div><div class="line">mode=ubi</div><div class="line">image=ubifs.img</div><div class="line">vol_id=0</div><div class="line">vol_size=64MiB</div><div class="line">vol_type=dynamic</div><div class="line">vol_name=rootfs</div><div class="line">vol_flags=autoresize</div><div class="line">vol_alignment=1</div></pre></td></tr></table></figure></p>
<p>输入以下命令生成最终文件系统fsimage.ubi：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">#sudo ubinize -m 2048 -p 128KiB -o fsimage.ubi ubinize.cfg</div></pre></td></tr></table></figure></p>
<p>ubinize参数说明：</p>
<ul>
<li>-m 最小输入/输出字节闪存单元的大小</li>
<li>-p FLASH的物理擦除块大小</li>
<li>-o 输出文件</li>
</ul>
<p>这里和mkfs.ubifs参数不通，-p的参数为物理擦除块大小，ubi工作在mtd层之上，所以需要mtd的参数，即物理参数；而ubifs工作在ubi之上，需要ubi的参数，即逻辑参数。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;最近项目上用到了嵌入式linux，发现文件系统已经从熟知的yaffs2系统变成了ubi（Unsorted Block Images）系统。这里简单介绍下ubi文件系统的使用方法。&lt;/p&gt;
    
    </summary>
    
    
      <category term="ubifs" scheme="http://yoursite.com/tags/ubifs/"/>
    
  </entry>
  
  <entry>
    <title>golang之interface</title>
    <link href="http://yoursite.com/2017/04/23/golang%E4%B9%8Binterface/"/>
    <id>http://yoursite.com/2017/04/23/golang之interface/</id>
    <published>2017-04-23T14:58:14.000Z</published>
    <updated>2017-04-23T15:06:54.000Z</updated>
    
    <content type="html"><![CDATA[<p>go的interface很特别，所有的对象都是interface的实现，所以如果想表达一个任意类型，可以用interface{}来表示。比如：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">func myFunc(src interface&#123;&#125;) &#123;</div><div class="line">    // 在这里src就是一个任意类型</div><div class="line">    switch src.type &#123;</div><div class="line">    case string:</div><div class="line"></div><div class="line">    case int:</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>在这里src可以是任意类型，可以在函数内部通过src.type来进行类型判定。<br>interface不光可以表示自定义类型，同时也可以是一组方法的集合。他有两个特点：</p>
<ul>
<li>自定义类型</li>
<li>没有数据成员，只有方法</li>
</ul>
<a id="more"></a>
<p>接口是抽象的，所以不能被实例化。但是可以创建一个类型为接口的变量，它可以被赋值为任何满足该接口类型的实际类型的值。这句话很拗口，我们继续往下看。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">type Payload interface &#123;</div><div class="line">    MarshalBinary() (data []byte, err error)</div><div class="line">&#125;</div><div class="line"></div><div class="line">type DataPayload struct &#123;</div><div class="line">    Bytes []byte</div><div class="line">&#125;</div><div class="line"></div><div class="line">// MarshalBinary marshals the object in binary form.</div><div class="line">func (p DataPayload) MarshalBinary() ([]byte, error) &#123;</div><div class="line">    return p.Bytes, nil</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>在这里类型<strong>DataPayload</strong>实现了接口<strong>Payload</strong>的方法，那么类型<strong>DataPayload</strong>就是<strong>Payload</strong>的实现，该类型的值可以赋给该接口的值。<br>所以我们就可以回头看开始的例子，<strong>任何类型的值都可以赋值给空接口interface{}</strong>。</p>
<blockquote>
<p>接口的特性是Go语言支持鸭子类型的基础，即“如果它走起来像鸭子，叫起来像鸭子（实现了接口要的方法），它就是一只鸭子（可以被赋值给接口的值）”。凭借接口机制和鸭子类型，Go语言提供了一种有利于类、继承、模板之外的更加灵活强大的选择。只要类型T的公开方法完全满足接口I的要求，就可以把类型T的对象用在需要接口I的地方。这种做法的学名叫做”Structural Typing“。</p>
</blockquote>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;go的interface很特别，所有的对象都是interface的实现，所以如果想表达一个任意类型，可以用interface{}来表示。比如：&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;7&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;8&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;func myFunc(src interface&amp;#123;&amp;#125;) &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    // 在这里src就是一个任意类型&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    switch src.type &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    case string:&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    case int:&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;在这里src可以是任意类型，可以在函数内部通过src.type来进行类型判定。&lt;br&gt;interface不光可以表示自定义类型，同时也可以是一组方法的集合。他有两个特点：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;自定义类型&lt;/li&gt;
&lt;li&gt;没有数据成员，只有方法&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
    
      <category term="golang" scheme="http://yoursite.com/tags/golang/"/>
    
  </entry>
  
  <entry>
    <title>loraserver之redis分析</title>
    <link href="http://yoursite.com/2017/04/12/loraserver%E4%B9%8Bredis%E5%88%86%E6%9E%90/"/>
    <id>http://yoursite.com/2017/04/12/loraserver之redis分析/</id>
    <published>2017-04-12T07:09:24.000Z</published>
    <updated>2017-04-23T10:32:50.000Z</updated>
    
    <content type="html"><![CDATA[<p>loraserver在与gateway通信，数据的存储采用的是redis。</p>
<a id="more"></a>
<h2 id="启动redis"><a href="#启动redis" class="headerlink" title="启动redis"></a>启动redis</h2><p>在终端输入：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">redis-server</div></pre></td></tr></table></figure></p>
<p>redis服务就启动了，不要关闭终端</p>
<h2 id="连接redis"><a href="#连接redis" class="headerlink" title="连接redis"></a>连接redis</h2><p>打开一个新终端，输入:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">redis-cli -h [host] -p [port] -a [password]</div></pre></td></tr></table></figure></p>
<p>分别对应主机ip地址、端口号、密码</p>
<h2 id="分布式锁"><a href="#分布式锁" class="headerlink" title="分布式锁"></a>分布式锁</h2><p>在loraserver的backend/gateway.go里面，redis设置key用了分布式锁<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">_, err := redis.String(redisConn.Do(&quot;SET&quot;, key, &quot;lock&quot;, &quot;PX&quot;, time, &quot;NX&quot;))</div></pre></td></tr></table></figure></p>
<p>其实就是下面的命令:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">set key lock NX PX time</div></pre></td></tr></table></figure></p>
<p>这个命令的作用是在只有这个key不存在的时候才会设置这个key的值（NX选项的作用），超时时间time毫秒，这个key的值会设为“lock”，这个值必须在所有获取锁请求的客户端里保持唯一。<br><strong>终端在多个网关的覆盖情况下，mqtt所有的订阅者都会收到所有网关的上行数据，第一个接收者需要锁定他，这样其他接收者会忽视重复的消息</strong></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;loraserver在与gateway通信，数据的存储采用的是redis。&lt;/p&gt;
    
    </summary>
    
    
      <category term="LoRaWAN" scheme="http://yoursite.com/tags/LoRaWAN/"/>
    
      <category term="SQL" scheme="http://yoursite.com/tags/SQL/"/>
    
  </entry>
  
  <entry>
    <title>loraserver之sql分析</title>
    <link href="http://yoursite.com/2017/04/12/loraserver%E4%B9%8Bsql%E5%88%86%E6%9E%90/"/>
    <id>http://yoursite.com/2017/04/12/loraserver之sql分析/</id>
    <published>2017-04-12T02:53:52.000Z</published>
    <updated>2017-04-12T05:50:15.000Z</updated>
    
    <content type="html"><![CDATA[<p>loraserver的sql采用的postgres，他的sql migrations部分很少，跟着一起来分析下</p>
<a id="more"></a>
<h2 id="启动postgres"><a href="#启动postgres" class="headerlink" title="启动postgres"></a>启动postgres</h2><p>如果psql提示如下错误：<br><strong>“／var/run/postgresql/.s.PGSQL.5432”上准备接受联接?</strong><br>那么因该是postgres未启动，输入：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">sudo service postgresql restart</div></pre></td></tr></table></figure></p>
<h2 id="索引"><a href="#索引" class="headerlink" title="索引"></a>索引</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">create index idx_gateway_name on gateway (name);</div></pre></td></tr></table></figure>
<p>在gateway表的name列上创建索引，加速搜索/查询。</p>
<h2 id="外键约束"><a href="#外键约束" class="headerlink" title="外键约束"></a>外键约束</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">create table gateway_stats &#123;</div><div class="line">    mac bytea not null references gateway on delete cascade,</div><div class="line">    ...</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<ul>
<li>references：gateway_stats的mac与gateway的mac建立的主、外键关系。</li>
<li>on delete cascade：指定如果试图删除一行，而改行的键被其他表的现有行中的外键引用，则也将删除所有包含那些外间的行</li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;loraserver的sql采用的postgres，他的sql migrations部分很少，跟着一起来分析下&lt;/p&gt;
    
    </summary>
    
    
      <category term="LoRaWAN" scheme="http://yoursite.com/tags/LoRaWAN/"/>
    
      <category term="SQL" scheme="http://yoursite.com/tags/SQL/"/>
    
  </entry>
  
  <entry>
    <title>github上go库说明记录</title>
    <link href="http://yoursite.com/2017/04/06/github%E4%B8%8Ago%E5%BA%93%E8%AF%B4%E6%98%8E%E8%AE%B0%E5%BD%95/"/>
    <id>http://yoursite.com/2017/04/06/github上go库说明记录/</id>
    <published>2017-04-06T12:51:10.000Z</published>
    <updated>2017-04-12T02:52:50.000Z</updated>
    
    <content type="html"><![CDATA[<p>在github上有很多go库，这里作为一个介绍记录，便于以后查找</p>
<a id="more"></a>
<h2 id="urfave"><a href="#urfave" class="headerlink" title="urfave"></a><a href="https://github.com/urfave/cli" target="_blank" rel="external">urfave</a></h2><p>cli is a simple, fast, and fun package for building command line apps in Go.<br>The goal is to enable developers to write fast and distributable command line applications in an expressive way.</p>
<h2 id="logrus"><a href="#logrus" class="headerlink" title="logrus"></a><a href="github.com/Sirupsen/logrus">logrus</a></h2><p>Structured, pluggable logging for Go. Nicely color-coded in development.</p>
<h2 id="sql-migrate"><a href="#sql-migrate" class="headerlink" title="sql-migrate"></a><a href="github.com/rubenv/sql-migrate">sql-migrate</a></h2><p>SQL schema migration tool for Go. Based on gorp and goose.</p>
<ul>
<li>Usable as a CLI tool or as a library</li>
<li>Supports SQLite, PostgreSQL, MySQL, MSSQL and Oracle databases (through gorp)</li>
<li>Can embed migrations into your application</li>
<li>Migrations are defined with SQL for full flexibility</li>
<li>Atomic migrations</li>
<li>Up/down migrations to allow rollback</li>
<li>Supports multiple database types in one project</li>
</ul>
<h2 id="gRPC"><a href="#gRPC" class="headerlink" title="gRPC"></a><a href="google.golang.org/gprc">gRPC</a></h2><p>Package grpc implements an RPC system called gRPC.</p>
<h2 id="go-bindata"><a href="#go-bindata" class="headerlink" title="go-bindata"></a><a href="github.com/jteeuwen/go-bindata">go-bindata</a></h2><p>a small utility which generates Go code from any file. Useful for embedding binary data in a Go program.</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;在github上有很多go库，这里作为一个介绍记录，便于以后查找&lt;/p&gt;
    
    </summary>
    
    
      <category term="golang" scheme="http://yoursite.com/tags/golang/"/>
    
  </entry>
  
  <entry>
    <title>golang之配置记录</title>
    <link href="http://yoursite.com/2017/04/04/golang%E4%B9%8B%E9%85%8D%E7%BD%AE%E8%AE%B0%E5%BD%95/"/>
    <id>http://yoursite.com/2017/04/04/golang之配置记录/</id>
    <published>2017-04-04T11:56:56.000Z</published>
    <updated>2017-04-23T15:01:32.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="2017-04-04"><a href="#2017-04-04" class="headerlink" title="2017-04-04"></a>2017-04-04</h2><h3 id="go-get-慢"><a href="#go-get-慢" class="headerlink" title="go get 慢"></a>go get 慢</h3><p>因为gfw的网络问题，go get获取资源很慢，这里有个解决方案：<a href="http://golangtc.com/download/package" target="_blank" rel="external">下载第三方包</a></p>
<a id="more"></a>
<h3 id="GOPATH"><a href="#GOPATH" class="headerlink" title="GOPATH"></a>GOPATH</h3><p>源代码如果需要使用到网络上的仓库比如：<br><figure class="highlight go"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> <span class="string">"github.com/xxx/xxx"</span></div></pre></td></tr></table></figure></p>
<p>那么需要把源代码放入GOPATH的src目录下</p>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;2017-04-04&quot;&gt;&lt;a href=&quot;#2017-04-04&quot; class=&quot;headerlink&quot; title=&quot;2017-04-04&quot;&gt;&lt;/a&gt;2017-04-04&lt;/h2&gt;&lt;h3 id=&quot;go-get-慢&quot;&gt;&lt;a href=&quot;#go-get-慢&quot; class=&quot;headerlink&quot; title=&quot;go get 慢&quot;&gt;&lt;/a&gt;go get 慢&lt;/h3&gt;&lt;p&gt;因为gfw的网络问题，go get获取资源很慢，这里有个解决方案：&lt;a href=&quot;http://golangtc.com/download/package&quot;&gt;下载第三方包&lt;/a&gt;&lt;/p&gt;
    
    </summary>
    
    
      <category term="golang" scheme="http://yoursite.com/tags/golang/"/>
    
  </entry>
  
  <entry>
    <title>jenkins与gitlab配置记录</title>
    <link href="http://yoursite.com/2017/03/15/jenkins%E4%B8%8Egitlab%E9%85%8D%E7%BD%AE%E8%AE%B0%E5%BD%95/"/>
    <id>http://yoursite.com/2017/03/15/jenkins与gitlab配置记录/</id>
    <published>2017-03-15T02:35:08.000Z</published>
    <updated>2017-04-10T13:29:31.000Z</updated>
    
    <content type="html"><![CDATA[<p>在jenkins与gitlab配置过程中，有些具体问题，记录下来</p>
<a id="more"></a>
<h2 id="gitlab-webhooks"><a href="#gitlab-webhooks" class="headerlink" title="gitlab webhooks"></a>gitlab webhooks</h2><p>因为使用的是gitlab ce版本，所以并没有jenkins插件，需要使用webhooks来进行推送。<br>打开一个项目，点击设置-&gt;Integrations，看到webhooks。<br>根据项目需要构建条件，选择event。这里我默认push events，ssl verification，其他不要。<br>在url里面填入：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">http://&lt;Jenkins server: port&gt;/project/&lt;job name&gt;/notify_commit</div></pre></td></tr></table></figure></p>
<ul>
<li>notify_commit 会让jenkins立即知道代码仓库发生了变化</li>
</ul>
<p>点击测试，可以在jenkins界面，看到构建过程</p>
<h2 id="服务器ip转发问题"><a href="#服务器ip转发问题" class="headerlink" title="服务器ip转发问题"></a>服务器ip转发问题</h2><p>因为jenkins与gitlab服务配置在同一台服务器上面，而2个服务都有对应的外网。在配置jenkins拉取gitlab代码的时候，会因为ip路由问题，无法成功，这里要用到iptables来建立转发：</p>
<pre><code>sudo iptables -t nat -A OUTPUT -p tcp --dst &lt;外网ip&gt; --dport &lt;gitlab外网端口&gt; -j REDIRECT
sudo /sbin/iptables-save
</code></pre><p>命令输入以后，以后对gitlab的访问ip都映射到localhost。同时保存了iptables配置，防止服务器重启以后在此输入。</p>
<p><strong>如果是局域网内的多台服务器之间通信，用外网ip访问需要主路由器进行iptables进行地址转发，如果是用域名的方式，可以在局域网内修改host的方式完成。</strong></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;在jenkins与gitlab配置过程中，有些具体问题，记录下来&lt;/p&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>2017年成长计划</title>
    <link href="http://yoursite.com/2017/03/08/2017%E5%B9%B4%E6%88%90%E9%95%BF%E8%AE%A1%E5%88%92/"/>
    <id>http://yoursite.com/2017/03/08/2017年成长计划/</id>
    <published>2017-03-08T06:38:32.000Z</published>
    <updated>2017-06-15T13:23:15.000Z</updated>
    
    <content type="html"><![CDATA[<p>进入嵌入式软件这个行业已经9年了，一直致力于软件技术的掌握，忽略了个人软实力的提升。在2017年需要作出改观，下面是我的2017年计划。</p>
<a id="more"></a>
<h2 id="SDK优化"><a href="#SDK优化" class="headerlink" title="SDK优化"></a>SDK优化</h2><p>现在基于wsnos的开发环境已经基本成熟，再此基础上开展的sdk化工作刚刚开头，在接下来的一年里，针对sdk方面，优化几点：</p>
<ul>
<li>协议栈的稳定性</li>
<li>开发使用便捷性</li>
<li>平台固定</li>
</ul>
<h2 id="架构设计"><a href="#架构设计" class="headerlink" title="架构设计"></a>架构设计</h2><p>嵌入式sdk方面以无线协议做为基础，已经实现了与云的通信。个人对服务器方面的了解比较少，对于系统整体架构认知还有所欠缺，缺乏系统设计能力。在这一年里需要做到：</p>
<ul>
<li>以LoRaWAN为案例，自行搭建私有服务器，实现整套LPWA网络系统架设。</li>
<li>每天查看loraserver,lora-app-server,gateway仓库的issue.</li>
</ul>
<h2 id="文档能力"><a href="#文档能力" class="headerlink" title="文档能力"></a>文档能力</h2><p>软件配套的文档写的太少，对于后续的开发者以及自己都是一个障碍，后续软件开发要重视起来，每个模块、系统文档工作都要配备好</p>
<h2 id="演讲能力"><a href="#演讲能力" class="headerlink" title="演讲能力"></a>演讲能力</h2><p>计划在这一年里面针对sdk，架构方面做3次分享，把一年内的成果展示出来</p>
<ul>
<li><del>SDK PPT分享</del></li>
<li>LoRaWAN系统架构分享</li>
<li><del>软件开发测试分享</del></li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;进入嵌入式软件这个行业已经9年了，一直致力于软件技术的掌握，忽略了个人软实力的提升。在2017年需要作出改观，下面是我的2017年计划。&lt;/p&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>LoRaWAN协议之添加频段支持</title>
    <link href="http://yoursite.com/2017/02/10/LoRaWAN%E5%8D%8F%E8%AE%AE%E4%B9%8B%E6%B7%BB%E5%8A%A0%E9%A2%91%E6%AE%B5%E6%94%AF%E6%8C%81/"/>
    <id>http://yoursite.com/2017/02/10/LoRaWAN协议之添加频段支持/</id>
    <published>2017-02-10T07:52:21.000Z</published>
    <updated>2017-04-08T12:40:01.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="0-前言"><a href="#0-前言" class="headerlink" title="0 前言"></a>0 前言</h2><p>最新的LoRaWAN的V4版本已经不支持470MHz频段，如果需要支持的话，需要对源代码进行修改。</p>
<a id="more"></a>
<h2 id="1-定义宏参数"><a href="#1-定义宏参数" class="headerlink" title="1 定义宏参数"></a>1 定义宏参数</h2><p>在LoRaWAN协议定义了不同频段，查看LoRaMac-definitions.h文件，我们可以发现：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">#if defined( USE_BAND_433)</div><div class="line">...</div><div class="line">#elif defined( USE_BAND_780 )</div><div class="line">...</div><div class="line">#elif defined( USE_BAND_868 )</div><div class="line">...</div><div class="line">#elif defined( USE_BAND_915 ) || defined( USE_BAND_915_HYBRID )</div><div class="line">...</div><div class="line">#endif</div></pre></td></tr></table></figure></p>
<p>我们需要新增<strong>USE_BAND_470</strong>。在USE_BAND_433与USE_BAND_780之间新增：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div></pre></td><td class="code"><pre><div class="line">#elif defined( USE_BAND_470 )</div><div class="line">/*!</div><div class="line"> * LoRaMac maximum number of channels</div><div class="line"> */</div><div class="line">#define LORA_MAX_NB_CHANNELS                        16</div><div class="line"></div><div class="line">/*!</div><div class="line"> * Minimal datarate that can be used by the node</div><div class="line"> */</div><div class="line">#define LORAMAC_TX_MIN_DATARATE                     DR_0</div><div class="line"></div><div class="line">/*!</div><div class="line"> * Maximal datarate that can be used by the node</div><div class="line"> */</div><div class="line">#define LORAMAC_TX_MAX_DATARATE                     DR_7</div><div class="line"></div><div class="line">/*!</div><div class="line"> * Minimal datarate that can be used by the node</div><div class="line"> */</div><div class="line">#define LORAMAC_RX_MIN_DATARATE                     DR_0</div><div class="line"></div><div class="line">/*!</div><div class="line"> * Maximal datarate that can be used by the node</div><div class="line"> */</div><div class="line">#define LORAMAC_RX_MAX_DATARATE                     DR_7</div><div class="line"></div><div class="line">/*!</div><div class="line"> * Default datarate used by the node</div><div class="line"> */</div><div class="line">#define LORAMAC_DEFAULT_DATARATE                    DR_0</div><div class="line"></div><div class="line">/*!</div><div class="line"> * Minimal Rx1 receive datarate offset</div><div class="line"> */</div><div class="line">#define LORAMAC_MIN_RX1_DR_OFFSET                   0</div><div class="line"></div><div class="line">/*!</div><div class="line"> * Maximal Rx1 receive datarate offset</div><div class="line"> */</div><div class="line">#define LORAMAC_MAX_RX1_DR_OFFSET                   5</div><div class="line"></div><div class="line">/*!</div><div class="line"> * Minimal Tx output power that can be used by the node</div><div class="line"> */</div><div class="line">#define LORAMAC_MIN_TX_POWER                        TX_POWER_M5_DBM</div><div class="line"></div><div class="line">/*!</div><div class="line"> * Maximal Tx output power that can be used by the node</div><div class="line"> */</div><div class="line">#define LORAMAC_MAX_TX_POWER                        TX_POWER_10_DBM</div><div class="line"></div><div class="line">/*!</div><div class="line"> * Default Tx output power used by the node</div><div class="line"> */</div><div class="line">#define LORAMAC_DEFAULT_TX_POWER                    TX_POWER_10_DBM</div><div class="line"></div><div class="line">/*!</div><div class="line"> * LoRaMac TxPower definition</div><div class="line"> */</div><div class="line">#define TX_POWER_10_DBM                             0</div><div class="line">#define TX_POWER_07_DBM                             1</div><div class="line">#define TX_POWER_04_DBM                             2</div><div class="line">#define TX_POWER_01_DBM                             3</div><div class="line">#define TX_POWER_M2_DBM                             4</div><div class="line">#define TX_POWER_M5_DBM                             5</div><div class="line"></div><div class="line">/*!</div><div class="line"> * LoRaMac datarates definition</div><div class="line"> */</div><div class="line">#define DR_0                                        0  // SF12 - BW125</div><div class="line">#define DR_1                                        1  // SF11 - BW125</div><div class="line">#define DR_2                                        2  // SF10 - BW125</div><div class="line">#define DR_3                                        3  // SF9  - BW125</div><div class="line">#define DR_4                                        4  // SF8  - BW125</div><div class="line">#define DR_5                                        5  // SF7  - BW125</div><div class="line">#define DR_6                                        6  // SF7  - BW250</div><div class="line">#define DR_7                                        7  // FSK</div><div class="line"></div><div class="line">/*!</div><div class="line"> * Second reception window channel definition. 定义接收窗口使用的信道、速率</div><div class="line"> */</div><div class="line">// Channel = &#123; Frequency [Hz], Datarate &#125;</div><div class="line">#define RX_WND_2_CHANNEL                                  &#123; 473400000, DR_3 &#125;</div><div class="line"></div><div class="line">/*!</div><div class="line"> * LoRaMac maximum number of bands</div><div class="line"> */</div><div class="line">#define LORA_MAX_NB_BANDS                           1</div><div class="line"></div><div class="line">// Band = &#123; DutyCycle, TxMaxPower, LastTxDoneTime, TimeOff &#125;</div><div class="line">#define BAND0              &#123; 1, TX_POWER_10_DBM, 0,  0 &#125; //  100 %</div><div class="line"></div><div class="line">/*!</div><div class="line"> * LoRaMac default channels：这里需要定义不同信道、速率</div><div class="line"> */</div><div class="line">// Channel = &#123; Frequency [Hz], &#123; ( ( DrMax &lt;&lt; 4 ) | DrMin ) &#125;, Band &#125;</div><div class="line">#define LC1                &#123; 471500000, &#123; ( ( DR_5 &lt;&lt; 4 ) | DR_0 ) &#125;, 0 &#125;</div><div class="line">#define LC2                &#123; 471700000, &#123; ( ( DR_5 &lt;&lt; 4 ) | DR_0 ) &#125;, 0 &#125;</div><div class="line">#define LC3                &#123; 471900000, &#123; ( ( DR_5 &lt;&lt; 4 ) | DR_0 ) &#125;, 0 &#125;</div><div class="line">#define LC4                &#123; 472100000, &#123; ( ( DR_5 &lt;&lt; 4 ) | DR_0 ) &#125;, 0 &#125;</div><div class="line">#define LC5                &#123; 472300000, &#123; ( ( DR_5 &lt;&lt; 4 ) | DR_0 ) &#125;, 0 &#125;</div><div class="line">#define LC6                &#123; 472500000, &#123; ( ( DR_5 &lt;&lt; 4 ) | DR_0 ) &#125;, 0 &#125;</div><div class="line">#define LC7                &#123; 472700000, &#123; ( ( DR_5 &lt;&lt; 4 ) | DR_0 ) &#125;, 0 &#125;</div><div class="line">#define LC8                &#123; 472900000, &#123; ( ( DR_5 &lt;&lt; 4 ) | DR_0 ) &#125;, 0 &#125;</div><div class="line"></div><div class="line">/*!</div><div class="line"> * LoRaMac duty cycle for the back-off procedure</div><div class="line"> */</div><div class="line">#define BACKOFF_DC_1_HOUR       100</div><div class="line">#define BACKOFF_DC_10_HOURS     1000</div><div class="line">#define BACKOFF_DC_24_HOURS     10000</div><div class="line"></div><div class="line">#define BACKOFF_RND_OFFSET      600000</div><div class="line"></div><div class="line">/*!</div><div class="line"> * LoRaMac channels which are allowed for the join procedure</div><div class="line"> */</div><div class="line">#define JOIN_CHANNELS      ( uint16_t )(LC(1) | LC(2) | LC(3) | LC(4) | LC(5) | LC(6) | LC(7) | LC(8))</div></pre></td></tr></table></figure></p>
<p>这里的参数基本与433频段一致，主要是信道、速率与433有所区别。</p>
<h2 id="2-定义速率、功率配置表"><a href="#2-定义速率、功率配置表" class="headerlink" title="2 定义速率、功率配置表"></a>2 定义速率、功率配置表</h2><p>在LoRaMac.c源文件，与第一部分一样，添加宏编译，内容参考USB_BAND_433。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div></pre></td><td class="code"><pre><div class="line">#elif defined( USE_BAND_470 )</div><div class="line">/*!</div><div class="line"> * Data rates table definition</div><div class="line"> */</div><div class="line">const uint8_t Datarates[]  = &#123; 12, 11, 10,  9,  8,  7,  7, 50 &#125;;</div><div class="line"></div><div class="line">/*!</div><div class="line"> * Maximum payload with respect to the datarate index. Cannot operate with repeater.</div><div class="line"> */</div><div class="line">const uint8_t MaxPayloadOfDatarate[] = &#123; 59, 59, 59, 123, 250, 250, 250, 250 &#125;;</div><div class="line"></div><div class="line">/*!</div><div class="line"> * Maximum payload with respect to the datarate index. Can operate with repeater.</div><div class="line"> */</div><div class="line">const uint8_t MaxPayloadOfDatarateRepeater[] = &#123; 59, 59, 59, 123, 230, 230, 230, 230 &#125;;</div><div class="line"></div><div class="line">/*!</div><div class="line"> * Tx output powers table definition</div><div class="line"> */</div><div class="line">const int8_t TxPowers[]    = &#123; 20, 17, 14, 11,  8,  5,  2 &#125;;</div><div class="line"></div><div class="line">/*!</div><div class="line"> * LoRaMac bands</div><div class="line"> */</div><div class="line">static Band_t Bands[LORA_MAX_NB_BANDS] =</div><div class="line">&#123;</div><div class="line">    BAND0,</div><div class="line">&#125;;</div><div class="line"></div><div class="line">/*!</div><div class="line"> * LoRaMAC channels</div><div class="line"> */</div><div class="line">static ChannelParams_t Channels[LORA_MAX_NB_CHANNELS] =</div><div class="line">&#123;</div><div class="line">    LC1,</div><div class="line">    LC2,</div><div class="line">    LC3,</div><div class="line">    LC4,</div><div class="line">    LC5,</div><div class="line">    LC6,</div><div class="line">    LC7,</div><div class="line">    LC8,</div><div class="line">&#125;;</div></pre></td></tr></table></figure></p>
<p>在TxPowers[]里面添加17选项。</p>
<h2 id="3-信道修改"><a href="#3-信道修改" class="headerlink" title="3 信道修改"></a>3 信道修改</h2><p>从上面的配置信息我们也可以看出来，470相对433的通道有8个，433只有3个。所以代码里面需要在修改一下。对应LoRaMac.c源文件，搜索所有USB_BAND_433，首先修改信道掩码3处：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div></pre></td><td class="code"><pre><div class="line">LoRaMacStatus_t LoRaMacInitialization( LoRaMacPrimitives_t *primitives, LoRaMacCallback_t *callbacks )</div><div class="line">&#123;</div><div class="line">    ...</div><div class="line">#if defined( USE_BAND_433 )</div><div class="line">    LoRaMacParamsDefaults.ChannelsMask[0] = LC( 1 ) + LC( 2 ) + LC( 3 );</div><div class="line">#elif defined( USE_BAND_470 )   //*&lt; 新增掩码修改1</div><div class="line">    LoRaMacParamsDefaults.ChannelsMask[0] = LC( 1 ) + LC( 2 ) + LC( 3 ) + LC( 4 ) + LC( 5 ) + LC( 6 ) + LC( 7 ) + LC( 8 );</div><div class="line">#elif defined( USE_BAND_780 )</div><div class="line">    ...</div><div class="line">&#125;</div><div class="line"></div><div class="line">static LoRaMacStatus_t ScheduleTx( )</div><div class="line">&#123;</div><div class="line">    ...</div><div class="line">    // Select channel</div><div class="line">    while( SetNextChannel( &amp;dutyCycleTimeOff ) == false )</div><div class="line">    &#123;</div><div class="line">        // Set the default datarate</div><div class="line">        LoRaMacParams.ChannelsDatarate = LoRaMacParamsDefaults.ChannelsDatarate;</div><div class="line"></div><div class="line">#if defined( USE_BAND_433 ) || defined( USE_BAND_780 ) || defined( USE_BAND_868 )</div><div class="line">        // Re-enable default channels LC1, LC2, LC3</div><div class="line">        LoRaMacParams.ChannelsMask[0] = LoRaMacParams.ChannelsMask[0] | ( LC( 1 ) + LC( 2 ) + LC( 3 ) );</div><div class="line">#elif defined( USE_BAND_470 )   //*&lt; 新增掩码修改2</div><div class="line">        LoRaMacParams.ChannelsMask[0] = LoRaMacParams.ChannelsMask[0] | ( LC( 1 ) + LC( 2 ) + LC( 3 ) + LC( 4 ) + LC( 5 ) + LC( 6 ) + LC( 7 ) + LC( 8 ) );</div><div class="line">#endif</div><div class="line">    &#125;</div><div class="line">    ...</div><div class="line">&#125;    </div><div class="line"></div><div class="line">static void OnMacStateCheckTimerEvent( void )</div><div class="line">&#123;</div><div class="line">    ...</div><div class="line">#if defined( USE_BAND_433 ) || defined( USE_BAND_780 ) || defined( USE_BAND_868 )</div><div class="line">                // Re-enable default channels LC1, LC2, LC3</div><div class="line">                LoRaMacParams.ChannelsMask[0] = LoRaMacParams.ChannelsMask[0] | ( LC( 1 ) + LC( 2 ) + LC( 3 ) );</div><div class="line">#elif defined( USE_BAND_470 )   //*&lt; 新增掩码修改3</div><div class="line">                LoRaMacParams.ChannelsMask[0] = LoRaMacParams.ChannelsMask[0] | ( LC( 1 ) + LC( 2 ) + LC( 3 ) + LC( 4 ) + LC( 5 ) + LC( 6 ) + LC( 7 ) + LC( 8 ) );</div><div class="line">#elif defined( USE_BAND_915 )</div><div class="line">    ...</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>然后所有剩余的USB_BAND_433后面添加USB_BAND_470。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">#if defined( USE_BAND_433 ) ...</div></pre></td></tr></table></figure></p>
<p>修改成：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">#if defined( USE_BAND_433 ) || defined( USE_BAND_470 ) ...</div></pre></td></tr></table></figure></p>
<p>这样就完成了LoRaWAN版本对470频段支持。</p>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;0-前言&quot;&gt;&lt;a href=&quot;#0-前言&quot; class=&quot;headerlink&quot; title=&quot;0 前言&quot;&gt;&lt;/a&gt;0 前言&lt;/h2&gt;&lt;p&gt;最新的LoRaWAN的V4版本已经不支持470MHz频段，如果需要支持的话，需要对源代码进行修改。&lt;/p&gt;
    
    </summary>
    
    
      <category term="LoRaWAN" scheme="http://yoursite.com/tags/LoRaWAN/"/>
    
  </entry>
  
  <entry>
    <title>hexo引用站内文章链接</title>
    <link href="http://yoursite.com/2017/02/10/hexo%E5%BC%95%E7%94%A8%E7%AB%99%E5%86%85%E6%96%87%E7%AB%A0%E9%93%BE%E6%8E%A5/"/>
    <id>http://yoursite.com/2017/02/10/hexo引用站内文章链接/</id>
    <published>2017-02-10T01:39:34.000Z</published>
    <updated>2017-03-08T06:52:10.000Z</updated>
    
    <content type="html"><![CDATA[<p>Hexo关于引用站内文章的链接，可以使用以下语法:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">&#123;% post_link 文章名称 点击这里查看这篇文章 %&#125;</div></pre></td></tr></table></figure></p>
<a id="more"></a>
<ul>
<li><strong>文章名称</strong>是你的文章名称。如果文章不存在，这段代码将会被直接忽略。</li>
<li><strong>点击这里查看这篇文章</strong>是该链接的标题。如果置空，则自动提取文章的标题。</li>
</ul>
<a href="/2017/01/18/git-submodule体会/" title="点击这里查看git-submodule体会">点击这里查看git-submodule体会</a>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Hexo关于引用站内文章的链接，可以使用以下语法:&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&amp;#123;% post_link 文章名称 点击这里查看这篇文章 %&amp;#125;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>git-submodule体会</title>
    <link href="http://yoursite.com/2017/01/18/git-submodule%E4%BD%93%E4%BC%9A/"/>
    <id>http://yoursite.com/2017/01/18/git-submodule体会/</id>
    <published>2017-01-18T02:45:22.000Z</published>
    <updated>2017-04-08T12:39:46.000Z</updated>
    
    <content type="html"><![CDATA[<p>最近项目上在使用git的submodule功能来维护，其中有几点，需要特别注意。</p>
<a id="more"></a>
<h2 id="添加"><a href="#添加" class="headerlink" title="添加"></a>添加</h2><p>通过下面的指令来添加子模块：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">git submodule add &lt;仓库地址&gt; &lt;本地路径&gt;</div></pre></td></tr></table></figure></p>
<ul>
<li>&lt;仓库地址&gt; 是我们想添加的子模块源仓库地址</li>
<li>&lt;本地路径&gt; 是我们想把子模块存放在本项目下的路径,比如:libs/libxxx</li>
</ul>
<p>执行完上面命令以后，会做三件事：</p>
<ol>
<li>clone仓库到指定路径</li>
<li><p>根目录下.gitmodule文件添加submodule具体信息</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">[submodule &quot;子模块名&quot;]</div><div class="line">    path = 本地路径</div><div class="line">    url = 仓库地址</div></pre></td></tr></table></figure>
</li>
<li><p>根目录下.git/config文件更新submodule的仓库地址 </p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">[submodule &quot;子模块名&quot;]</div><div class="line">    url = 仓库地址</div></pre></td></tr></table></figure>
</li>
</ol>
<h2 id="检出"><a href="#检出" class="headerlink" title="检出"></a>检出</h2><p>clone一个带submodule的项目，clone完以后submodule的文件并不会随父项目一起检出，因为父项目只是记录了submodule的commitID，需要另外的操作才行：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">git submodule init</div><div class="line">git submodule update</div></pre></td></tr></table></figure></p>
<p>执行完上面命令以后，submodule的文件就会检出，每次submodule更新，都需要执行上面的命令。<br>或者我们可以在clone的时候通过添加<strong>- -recursive</strong>参数来一次性检出。</p>
<h2 id="更新"><a href="#更新" class="headerlink" title="更新"></a>更新</h2><p>如果submodule有更新，在本地项目下git pull是不会更新submoudle的。我们需要通过下面的指令：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">git submodule update</div><div class="line">git submodule foreach git pull origin master</div></pre></td></tr></table></figure></p>
<p>可以把上面2条指令写入update_submodules.sh脚本，每次执行只需要：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">./update_submodules.sh</div></pre></td></tr></table></figure></p>
<h2 id="删除"><a href="#删除" class="headerlink" title="删除"></a>删除</h2><p>如果某个submodule不需要了，想删除，那么我们需要删除 <strong>.git/config</strong> 和 <strong>.gitmodule</strong> 文件里面submodule相关部分，然后在执行:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">git rm --cached &lt;本地路径&gt;</div></pre></td></tr></table></figure></p>
<p>这样才能将submodule从本地仓库删除干净，别忘记提交push。</p>
<h2 id="后记"><a href="#后记" class="headerlink" title="后记"></a>后记</h2><p>git submodule能够维护多个项目，好处很明显。但是缺点也存在，每次submodule更新，并不会主动更新带本地仓库，需要人为的去执行更新命令。所以想要每次主动执行update_submodules.sh。</p>
<p>下一篇会介绍git submodule功能升级版git subtree。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;最近项目上在使用git的submodule功能来维护，其中有几点，需要特别注意。&lt;/p&gt;
    
    </summary>
    
    
      <category term="git" scheme="http://yoursite.com/tags/git/"/>
    
  </entry>
  
  <entry>
    <title>LoRaWAN协议之入网分析</title>
    <link href="http://yoursite.com/2017/01/17/LoRaWAN%E5%8D%8F%E8%AE%AE%E4%B9%8B%E5%85%A5%E7%BD%91%E5%88%86%E6%9E%90/"/>
    <id>http://yoursite.com/2017/01/17/LoRaWAN协议之入网分析/</id>
    <published>2017-01-17T02:19:55.000Z</published>
    <updated>2017-04-08T12:39:58.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="网络"><a href="#网络" class="headerlink" title="网络"></a>网络</h2><p>为了参与LoRaWAN网络，每个终端设备必须被个性化和激活。终端设备的激活可以以2种方式实现。<br>在部署或重置终端时通过空中激活(OTAA)，或通过个性化激活(ABP)，其中终端设备个性化和激活两个步骤，选择一个步骤完成。</p>
<a id="more"></a>
<p>LoRaWAN网络中的key，ID，EUI关系，参考下表：</p>
<table>
<thead>
<tr>
<th>Mode</th>
<th>ID/EUI</th>
<th>Key</th>
</tr>
</thead>
<tbody>
<tr>
<td>ABP</td>
<td>DevAddr</td>
<td>NwkSKey, AppSKey</td>
</tr>
<tr>
<td>OTAA</td>
<td>AppEUI, DevEUI</td>
<td>AppKey</td>
</tr>
</tbody>
</table>
<ul>
<li>DevAddr 设备节点的短地址，在数据通讯阶段，使用的是短地址。</li>
</ul>
<table>
<thead>
<tr>
<th>bits</th>
<th>[31:25]</th>
<th>[24:0]</th>
</tr>
</thead>
<tbody>
<tr>
<td>DevAddr bits</td>
<td>NwkID</td>
<td>NwkAddr</td>
</tr>
</tbody>
</table>
<pre><code>- NwkID 网络标示，用来区分不同网络运营商的地域重叠网络地址问题，以及弥补漫游问题。
- NwkAddr 网络地址，由网络管理者任意分配
</code></pre><ul>
<li>AppEUI 在IEEE EUI64地址空间中的全球应用程序ID唯一地标识终端设备的应用提供商。</li>
<li>DevEUI 在IEEE EUI64地址空间中的全球终端ID唯一地标识终端设备。</li>
<li>NwkSKey 用于服务器以及终端计算和校验MIC。它用于加密、解密MAC数据消息载荷。</li>
<li>AppSKey 用于服务器以及终端加密、解密应用数据载荷。对应AES加密解密</li>
<li>AppKey 特定于终端设备的AES-128应用key，由应用所有者分配给终端设备，一般由应用专用的根密钥导出。</li>
</ul>
<h3 id="ABP"><a href="#ABP" class="headerlink" title="ABP"></a>ABP</h3><p>在ABP模式下，DevAddr、NwkSKey以及AppSKey需要预先设置的。默认终端设备已经入网。</p>
<h3 id="OTAA"><a href="#OTAA" class="headerlink" title="OTAA"></a>OTAA</h3><p>OTAA方式激活，终端设备需要与网络服务器之间进行入网流程交互，如果丢失会话信息，终端设备需要重新与网络服务器进行入网流程交互。入网流程如下：</p>
<ol>
<li>终端发送入网请求</li>
<li>网关接收终端数据，转发给服务器</li>
<li>服务器接收入网请求，同意入网，并把设备注册到服务器，建立DevEUI与DevAddr关系，生成通讯密钥，将通讯密钥发送给网关</li>
<li>网关接收服务器数据，下发给终端</li>
<li>终端设备接收入网应答，得到DevAddr, AppSKey, NwkSKey。</li>
</ol>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;网络&quot;&gt;&lt;a href=&quot;#网络&quot; class=&quot;headerlink&quot; title=&quot;网络&quot;&gt;&lt;/a&gt;网络&lt;/h2&gt;&lt;p&gt;为了参与LoRaWAN网络，每个终端设备必须被个性化和激活。终端设备的激活可以以2种方式实现。&lt;br&gt;在部署或重置终端时通过空中激活(OTAA)，或通过个性化激活(ABP)，其中终端设备个性化和激活两个步骤，选择一个步骤完成。&lt;/p&gt;
    
    </summary>
    
    
      <category term="LoRaWAN" scheme="http://yoursite.com/tags/LoRaWAN/"/>
    
  </entry>
  
  <entry>
    <title>awesome-iot</title>
    <link href="http://yoursite.com/2017/01/12/awesome-iot/"/>
    <id>http://yoursite.com/2017/01/12/awesome-iot/</id>
    <published>2017-01-12T05:09:50.000Z</published>
    <updated>2017-04-08T12:39:39.000Z</updated>
    
    <content type="html"><![CDATA[<p>一份物联网项目与资源的整理清单。</p>
<blockquote>
<p> 物联网是新一代信息技术的重要组成部分，其英文名称是：“The Internet of things”。顾名思义，物联网就是物物相连的互联网。这有两层意思：其一，物联网的核心和基础仍然是互联网，是在互联网基础上的延伸和扩展的网络；其二，其用户端延伸和扩展到了任何物品与物品之间，进行信息交换和通信 也就是物物相息。物联网就是“物物相连的互联网”。</p>
</blockquote>
<a id="more"></a> 
<h2 id="快速导航"><a href="#快速导航" class="headerlink" title="快速导航"></a>快速导航</h2><ul>
<li><a href="#硬件">硬件</a><ul>
<li><a href="#Arduino">Arduino</a></li>
<li><a href="#Raspberry Pi">Raspberry Pi</a></li>
<li><a href="#BeagleBone Black">BeagleBone Black</a></li>
<li><a href="#Intel Galileo">Intel Galileo</a></li>
<li><a href="#pyboard">pyboard</a></li>
<li><a href="#Espruino">Espruino</a></li>
<li><a href="#Node MCU">Node MCU(esp 8266)</a></li>
</ul>
</li>
<li><a href="#软件">软件</a> <ul>
<li><a href="#操作系统">操作系统</a><ul>
<li><a href="#Apache Mynewt">Apache Mynewt</a></li>
<li><a href="#ARM mbed">ARM mbed</a></li>
<li><a href="#Contiki">Contiki</a></li>
<li><a href="#FreeRTOS">FreeRTOS</a></li>
<li><a href="#RT-Thread">RT-Thread</a></li>
<li><a href="#Android Things">Android Things</a></li>
<li><a href="#OpenWrt">OpenWrt</a></li>
<li><a href="#NodeOS">NodeOS</a></li>
<li><a href="#Raspbian">Raspbian</a></li>
<li><a href="#RIOT">RIOT</a></li>
<li><a href="#Tiny OS">Tiny OS</a></li>
<li><a href="#Windows 10 IoT">Windows 10 IoT</a></li>
</ul>
</li>
<li><a href="#框架">框架</a></li>
</ul>
</li>
<li><a href="#网络协议">网络协议</a><ul>
<li><a href="#物理层">物理层</a><ul>
<li><a href="#802.15.4">802.15.4</a></li>
<li><a href="#Bluetooth">Bluetooth</a></li>
<li><a href="#Bluetooth Low Energy">Bluetooth Low Energy</a></li>
<li><a href="#EC-GSM-IoT">EC-GSM-IoT</a></li>
<li><a href="#LoRaWAN">LoRaWAN</a></li>
<li><a href="#NB-IoT">NB-IoT</a></li>
<li><a href="#Sigfox">Sigfox</a></li>
<li><a href="#Wi-Fi">Wi-Fi</a></li>
</ul>
</li>
<li><a href="#网络层/传输层">网络层/传输层</a><ul>
<li><a href="#Rime">Rime</a></li>
<li><a href="#6LowPan">6LowPan</a></li>
<li><a href="#Thread">Thread</a></li>
<li><a href="#ZigBee">ZigBee</a></li>
<li><a href="#Z-Wave">Z-Wave</a></li>
</ul>
</li>
<li><a href="#应用层">应用层</a><ul>
<li><a href="#gRPC">gRPC</a></li>
<li><a href="#CoAP">CoAP</a></li>
<li><a href="#DTLS">DTLS</a></li>
<li><a href="#Eddystone">Eddystone</a></li>
<li><a href="#HTTP">HTTP</a></li>
<li><a href="#iBeacon">iBeacon</a></li>
<li><a href="#MQTT">MQTT</a></li>
<li><a href="#STOMP">STOMP</a></li>
<li><a href="#Websocket">Websocket</a></li>
<li><a href="#XMPP">XMPP</a></li>
</ul>
</li>
</ul>
</li>
<li><a href="#平台">平台</a></li>
</ul>
<h3 id="硬件"><a href="#硬件" class="headerlink" title="硬件"></a>硬件</h3><ul>
<li><span id="Arduino"><a href="https://www.arduino.cc/" target="_blank" rel="external">Arduino</a></span><br><img src="http://oj8s9k3s1.bkt.clouddn.com/arduino.jpg" alt=""></li>
</ul>
<blockquote>
<p>是一个基于开放原始码的软硬件平台，构建于开放原始码simple I／O界面版，并且具有使用类似Java，C语言的Processing/Writing开发环境。<br>Arduino能通过各种各样的传感器来感知环境，通过控制灯光、马达和其他的装置来反馈、影响环境。板子上的微控制器可以通过Arduino的编程语言来编写程序，编译成二进制文件，烧录进微控制器。对Arduino的编程是利用 Arduino编程语言 (基于Wiring)和 Arduino开发环境(based on Processing来实现的。基于Arduino的项目，可以只包含Arduino，也可以包含Arduino和其他一些在PC上运行的软件，他们之间进行通信 (比如 Flash, Processing, MaxMSP)来实现。</p>
</blockquote>
<ul>
<li><span id="Raspberry Pi"><a href="https://www.raspberrypi.org/" target="_blank" rel="external">Raspberry Pi</a></span><br><img src="http://oj8s9k3s1.bkt.clouddn.com/hardware-raspberry-pi.jpg" alt=""><br>Architecture:<ul>
<li>ARMv8 Cortex-A53, Broadcom BCM2837 1.2Ghz</li>
<li>1 GB DDR3 RAM, MicroSD card</li>
<li>4 usb</li>
<li>10/100 Ethernet</li>
<li>B/G/N wireless, Bluetooth</li>
</ul>
</li>
</ul>
<blockquote>
<p>树莓派(raspberry pi)，是一款基于linux系统的、只有一张信用卡大小的卡片式计算机。研发树莓派的最初目的是通过低价硬件及自由软件来推动在学校的基础的计算机学科教育，但很快树莓派就得到计算机和硬件爱好者青睐；他们用它学习编程，并创造出各种各样新奇的、风靡一时的软硬件应用。</p>
<p>在接口方面，Raspberry Pi提供了可供键鼠使用的USB接口，此外还有快速以太网接口、SD卡扩展接口以及1个HDMI高清视频输出接口，可与显示器或者TV相连。</p>
</blockquote>
<ul>
<li><span id="BeagleBone Black"><a href="https://beagleboard.org/black" target="_blank" rel="external">BeagleBone Black</a></span><br><img src="http://www.waveshare.com/img/devkit/BB-Black/BB-Black-7.jpg" alt=""><br>Architecture:<ul>
<li>Cortex-A8+ Dual PRU(200mhz) of AM3358/9</li>
<li>Frq at 1000Mhz</li>
<li>GPU of PowerVR SGX530</li>
<li>Fast Etherent</li>
<li>USB: 1 standard A host, 1 mini B device port</li>
<li>512 MB DDR3 RAM, 8-bits eMMC 2/4GB, microSD card</li>
</ul>
</li>
</ul>
<blockquote>
<p>BeageleBone Black是一款由德州仪器与Digi-Key和Newark element14合作生产的低能耗开源的单板机。它也是为运行开源软件而构建的一个系统。Fedora, Android, Ubuntu, openSUSE 和 Ångström已支持BeagleBoard的硬件。BeagleBoard也支持 FreeBSD, NetBSD, OpenBSD, QNX, MINIX 3, RISC OS和Windows Embedded。</p>
</blockquote>
<ul>
<li><span id="Intel Galileo"><a href="https://software.intel.com/en-us/iot/hardware/galileo" target="_blank" rel="external">Intel Galileo</a></span><br><img src="https://cdn-shop.adafruit.com/1200x900/1637-02.jpg" alt=""><br>Architecture:<ul>
<li>Single core Intel® Quark™ processor at 400 MHz</li>
<li>256 MB DDR3 RAM, 8 MB NOR flash</li>
<li>10/100 Ethernet, mPCIe slot</li>
<li>Yocto Project*</li>
<li>Arduino* compatible</li>
<li>C/C++, Python<em>, Node.js</em>, HTML5, JavaScript*</li>
</ul>
</li>
</ul>
<blockquote>
<p>英特尔® Galileo 第二代开发板是第一款基于英特尔® 架构且经过Arduino *认证的开发和原型板，专为制造商、学生、教育工作者和电子DIY爱好者而设计</p>
</blockquote>
<ul>
<li><span id=""><a href="https://software.intel.com/en-us/iot/hardware/edison" target="_blank" rel="external">Intel Edison</a></span><br><img src="http://images.anandtech.com/doci/8511/Edison_678x452.jpg" alt=""><br>Architecture:<ul>
<li>Dual-core Intel® Atom™ processor at 500 MHz</li>
<li>1 GB DDR3 RAM, 4 GB eMMC flash</li>
<li>40 multiplexed GPIO interfaces</li>
<li>Bluetooth<em> 4.0, Wi-Fi</em></li>
<li>Yocto Project<em>, Brillo</em></li>
<li>Arduino* compatible</li>
<li>Open-source software development environment</li>
<li>C/C++, Python<em>, Node.js</em>, HTML5, JavaScript*</li>
</ul>
</li>
</ul>
<blockquote>
<p>Intel® Edison 是一个低成本的片上系统(SoC)开发平台，使发明家、企业家和消费品设计师可以原型设计并开发物联网(IoT)和耐用的计算产品。</p>
</blockquote>
<ul>
<li><span id="pyboard"><a href="https://micropython.org/" target="_blank" rel="external">pyboard</a></span><br><img src="https://micropython.org/static/home/img/pybv11-persp.jpg" alt=""><br><img src="https://micropython.org/static/home/img/pybv10b-pinout.jpg" alt=""><br>Architecture:<ul>
<li>STM32F405RG microcontroller</li>
<li>168 MHz Cortex M4 CPU with hardware floating point 1024KiB flash ROM and 192KiB RAM</li>
<li>Micro USB connector for power and serial communication</li>
<li>Micro SD card slot, supporting standard and high capacity SD cards </li>
<li>3-axis accelerometer (MMA7660)</li>
<li>24 GPIO on left and right edges and 5 GPIO on bottom row, plus LED and switch GPIO available on bottom row</li>
<li>3x 12-bit analog to digital converters, available on 16 pins, 4 with analog ground shielding</li>
<li>2x 12-bit digital to analog (DAC) converters, available on pins X5 and X6</li>
<li>On-board 3.3V LDO voltage regulator, capable of supplying up to 250mA, input voltage range 3.6V to 16V</li>
<li>DFU bootloader in ROM for easy upgrading of firmware</li>
</ul>
</li>
</ul>
<blockquote>
<p>MicroPython pyboard是一个紧凑的电路板，在裸机上运行MicroPython，提供了一个低级的python操作系统，可用于控制各种电子设备。它与普通Python兼容，以致于你轻松将代码传输到pyboard。<br>MicroPython是Python 3编程语言的精简和高效实现，包括python标准库的一个小子集，并且为了在微控制器以及受限环境种运行做了优化。MicroPython包含了高级特性，如交互式提示，任意精度计算，闭包，列表解析，生成器，一场处理和更多。但它足够紧凑以适应运行在256k FALSH和16k RAM.</p>
</blockquote>
<ul>
<li><span id="Espruino"><a href="https://www.espruino.com/" target="_blank" rel="external">Espruino</a></span><br><img src="http://tehnikservice.net/blog/wp-content/uploads/2013/09/35725b74aafa2f40e43492c54aee44dd_large.png" alt=""></li>
</ul>
<blockquote>
<p>Espruino是运行在STM32系列单片机上的JavaScript解释器。Espruino Board是作者设计的运行Espruino的STM32F103RCT6单片机开发板，这个板子因为有特殊的USB bootloader，所以支持在线烧录FW，其他类型的兼容版暂时是不支持在线烧录FW的。</p>
<p>Espruino的出现意味着熟悉JavaScript编程的广大程序员们可以一起加入硬件开发的行列，设计出自己的创意电子作品。Espruino和Arduino都属于电子积木的范畴，其宗旨就是大大简化电子爱好者搭建电子创意作品的难度。</p>
<p>JavaScript的优势在于其是动态的解释型高级语言，不需要编译，而且可以在程序运行的时候动态的改变程序代码，编程和调试都很方便。</p>
<p>至于运行效率问题，不要一看到JavaScript就认为效率低下，Google的V8 JS引擎的效率已经和传统的编译语言相当。Espruino并不是基于V8编写，作者的设计目标是在内存有限的低功耗单片机上运行JS语言（8KB的RAM足够支持其的正常运行），执行效率虽然不会有二进制的编译语言那么快，但是应付一般的硬件模块操作还是足够的</p>
</blockquote>
<ul>
<li><span id="Node MCU"><a href="http://www.nodemcu.com/index_cn.html" target="_blank" rel="external">Node MCU(esp 8266)</a></span><br><img src="http://www.nodemcu.com/images/thumbnail/z1s_1.jpg_450x300.jpg" alt=""></li>
</ul>
<blockquote>
<p>提供硬件的高级接口，可以将应用开发者从繁复的硬件配置、寄存器操作中解放出来。用交互式Lua脚本，像arduino一样编写硬件代码！<br>事件驱动型API极大的方便了用户进行网络应用开发，使用类似Nodejs的方式编写网络代码，并运行于5mm*5mm大小的MCU之上，加快您的物联网开发进度。<br>用于快速原型的开发板，集成了售价低于10人民币WIFI芯片ESP8266。我们为您提供性价比最高的物联网应用开发平台。</p>
</blockquote>
<h3 id="软件"><a href="#软件" class="headerlink" title="软件"></a>软件</h3><h4 id="操作系统"><a href="#操作系统" class="headerlink" title="操作系统"></a>操作系统</h4><ul>
<li><span id="Apache Mynewt"><a href="https://mynewt.apache.org/" target="_blank" rel="external">Apache Mynewt</a></span><br><img src="http://files.linuxgizmos.com/mynewt_stack.jpg" alt=""></li>
</ul>
<blockquote>
<p>Apache Mynewt是一个开源模块化的实时操作系统，专门为内存和存储都极其有限而又要以极低功耗运行非常长时间的物联网（Internet of Things， IoT）设备设计。在关于Arduino与初创公司Runtime的一则新闻上，Mynewt被描述成“一个为32位微控制器（MCU）设计的组合式操作系统，将帮助可穿戴设备、电灯泡、锁、门铃等各式各样的嵌入式设备连上物联网。”</p>
<p>Mynewt项目突出强调了开源实现的4.2版低功耗蓝牙驱动程序（Bluetooth Low Energy，BLE），它为物联网开发提供了包括支持IPv6/6LoWPAN和蓝牙智能网关的互联网连接等在内的新能力，有更低的功耗和更快的吞吐速度。</p>
<p>Mynewt代码是用C语言写的，在github上开源。项目遵守2.0版Apache许可协议。</p>
</blockquote>
<ul>
<li>&lt;<span id="ARM mbed"><a href="https://www.mbed.com/en/" target="_blank" rel="external">ARM mbed</a></span><br><img src="http://oj8s9k3s1.bkt.clouddn.com/mbedos.png" alt=""></li>
</ul>
<blockquote>
<p>一款基于ARM Cortex-M处理器的设备所设计的免费操作系统，配有安全、通讯和设备管理模块，支持低功率智能蓝牙标准、2G、3G与CDMA通信技术、Thread、Wi-Fi、802.15.4/6LoWPAN、TLS/DTLS、CoAP、HTTP、MQTT以及轻量级的M2M。而只需32-64kbRAM和256kb闪存的配置，适合在小设备上运行。</p>
</blockquote>
<ul>
<li><span id="Contiki"><a href="http://www.contiki-os.org/" target="_blank" rel="external">Contiki</a></span></li>
</ul>
<blockquote>
<p>Contiki是一个适用于有内存的嵌入式系统的开源的、高可移植的、支持网络的多任务操作系统。包括一个多任务核心、TCP/IP 堆栈、程序集以及低能耗的无线通讯堆栈。Contiki 采用 C 语言开发的非常小型的嵌入式操作系统，运行只需要几K的内存。</p>
<p>Contiki只需几kbytes的代码和几百bytes的内存就能提供多任务环境和内建TCP/IP支持。支持COAP,MQTT多种物联网协议，TCP/IP支持IPV4,IPV6，同时支持6LOWPAN,RPL路由，除此之外还实现了一套私有的无线协议栈:Rime。</p>
</blockquote>
<ul>
<li><span id="FreeRTOS"><a href="http://www.freertos.org/" target="_blank" rel="external">FreeRTOS</a></span></li>
</ul>
<blockquote>
<p>FreeRTOS是一个迷你操作系统内核的小型嵌入式系统。作为一个轻量级的操作系统，功能包括：任务管理、时间管理、信号量、消息队列、内存管理、记录功能等，可基本满足较小系统的需要。</p>
<p>由于RTOS需占用一定的系统资源(尤其是RAM资源)，只有μC/OS-II、embOS、salvo、FreeRTOS等少数实时操作系统能在小RAM单片机上运行。相对μC/OS-II、embOS等商业操作系统，FreeRTOS操作系统是完全免费的操作系统，具有源码公开、可移植、可裁减、调度策略灵活的特点，可以方便地移植到各种单片机上运行</p>
</blockquote>
<p><strong>FreeRTOS提供了IoT的组件:Nabto,提供了基于p2p的对等连接的云管理服务。</strong><br><img src="http://www.freertos.org/FreeRTOS-Plus/Nabto/images/topology.png" alt=""></p>
<ul>
<li><span id="RT-Thread"><a href="http://www.rt-thread.org/" target="_blank" rel="external">RT-Thread</a></span><br><img src="http://oj8s9k3s1.bkt.clouddn.com/rtthread.png" alt=""></li>
</ul>
<blockquote>
<p>RT-Thread是一款来自中国的开源嵌入式实时操作系统，由国内一些专业开发人员从2006年开始开发、维护，除了类似FreeRTOS和UCOS的实时操作系统内核外，也包括一系列应用组件和驱动框架，如TCP/IP协议栈，虚拟文件系统，POSIX接口，图形用户界面，FreeModbus主从协议栈，CAN框架，动态模块等，因为系统稳定，功能丰富的特性被广泛用于新能源，电网，风机等高可靠性行业和设备上，已经被验证是一款高可靠的实时操作系统。</p>
<p>RT-Thread实时操作系统遵循GPLv2+许可证，实时操作系统内核及所有开源组件可以免费在商业产品中使用，不需要公布应用源码，没有任何潜在商业风险。</p>
</blockquote>
<ul>
<li><span id="Android Things"><a href="https://developer.android.com/things/index.html" target="_blank" rel="external">Android Things</a></span></li>
</ul>
<blockquote>
<p>这款操作系统可以运行在有线扬声器、智能控温器、安全摄像头、路由器等各种设备上.谷歌的理念是,通过Android Things让Android开发者与公司能够以他们过去的开发方式继续开发物联网硬件设备.这其中的关键一点是Android Things是Android系统的一个精简版,它定位于装备在智能硬件上,而非类似普通节能灯一样的设备.<br>除此之外,Android Things 的设备还具备通过Weave与Android与iOS进行集成的能力.Weave是一款通讯协议系统.去年谷歌将其与Brillo一同发布.这项协议将同样允许搭载Android Things的设备访问Google Assistant</p>
</blockquote>
<ul>
<li><span id="OpenWrt"><a href="https://openwrt.org/" target="_blank" rel="external">OpenWrt</a></span></li>
</ul>
<blockquote>
<p>OpenWrt是适合于嵌入式设备的一个Linux发行版。<br>相对原厂固件而言，OpenWrt不是一个单一、静态的固件，而是提供了一个可添加软件包的可写的文件系统。这使用户可以自由的选择应用程序和配置，而不必受设备提供商的限制，并且可以使用一些适合某方面应用的软件包来定制你的设备。对于开发者来说，OpenWrt是一个框架，开发者不必麻烦的构建整个固件就能得到想要的应用程序；对于用户来说，这意味着完全定制的能力，与以往不同的方式使用设备</p>
</blockquote>
<ul>
<li><span id="NodeOS"><a href="http://node-os.com/" target="_blank" rel="external">NodeOS</a></span></li>
</ul>
<blockquote>
<p>NodeOS是一个全部用Javascript编写的操作系统，采用 Linux 内核来处理各种底层任务</p>
</blockquote>
<ul>
<li><span id="Raspbian"><a href="https://raspbian.org/" target="_blank" rel="external">Raspbian</a></span></li>
</ul>
<blockquote>
<p>Raspbian是基于Debian的免费操作系统，并且针对Raspberry Pi硬件进行了专门优化.</p>
</blockquote>
<ul>
<li><span id="RIOT"><a href="http://www.riot-os.org/" target="_blank" rel="external">RIOT</a></span><br><img src="http://oj8s9k3s1.bkt.clouddn.com/RIOT_network_architecture_dark_preview.png" alt=""><br>Architecture:<ul>
<li>跨平台，编译一次，可以运行在8，16，32bit平台</li>
<li>完全符合posix标准</li>
<li>支持最大化能量效率</li>
<li>多线程支持，每个线程低于25字节消耗</li>
<li>支持6LOWPAN,IPv6,RPL, and UDP</li>
<li>COAP and CBOR</li>
</ul>
</li>
</ul>
<blockquote>
<p>物联网的友好操作系统。RIOT提供了linux的物联网能力。它是免费、开源的操作系统。实施所有相关的开放标准，支持互联网连接，安全，耐用，和隐私友好。</p>
</blockquote>
<ul>
<li><span id="Tiny OS"><a href="http://www.tinyos.net/" target="_blank" rel="external">Tiny OS</a></span></li>
</ul>
<blockquote>
<p>TinyOS是一款自由和开源的基于组件（component-based）的操作系统和平台，它主要针对无线传感器网络（WSN, wireless sensor network）。<br>TinyOS应用程序是用nesC编写，它是C programming language的一个分支对于感知网络的内存限制问题作了优化。它的补充工具主要来自于Java形式和shell script的front-ends。其他的相关的库和工具，例如NesC编译器和Atmel AVRbinutils toolchains，大部分用C编写。<br>TinyOS程序由基于组件的软件工程software component建构，它们中一些表现了硬件的抽象概念， 组件用接口互相连接。TinyOS为普通的抽象描述（abstractions）提供了接口和组件，例如数据包通信（packet communication），路由，感知（sensing），行为（actuation）和储存。<br>TinyOS 2.x版本后完全的non-blocking：它配备了一个单独的堆栈。因此所有的持续超过几百微秒I/O操作都以异步进行并且带有回叫功能（callback）。为了使本地的编译器更加出色地优化交叉调用边界（optimize across call boundaries）,TinyOS用nesC的特性去连接这些回叫，叫作事件（events）。non-blocking系统可以让TinyOS在单一存储器下保持高度的协同性（concurrency）。它强迫程序用stitching together many small event handlers的方法编写复合逻辑。为了支持更高的计算量，TinyOS提供了任务（tasks），其比Deferred Procedure Call and interrupt handler bottom halves小。<br>一个TinyOS组建可以发布一个任务，操作系统可以把它排入列表以待之后执行。任务是没有优先权的并且按照FIFO运行。 这个简单的协同模型是典型的满足了以I/O为中心的应用，但这样的模型对于CPU负荷重的应用程序来说不是太好的，因为它会导致向OS多次提出线程间协同处理的请求。</p>
</blockquote>
<ul>
<li>&lt;<span id="Windows 10 IoT"><a href="https://developer.microsoft.com/en-us/windows/iot" target="_blank" rel="external">Windows 10 IoT</a></span><br><img src="https://az835927.vo.msecnd.net/sites/iot/Resources/images/Homepage/devices_hero.png" alt=""></li>
</ul>
<blockquote>
<p>Windows 10物联网的核心是针对智能设备以及没有显示的一个Windows 10版本，并运行在Raspberry Pi的2和3，dragonboard 410c &amp; MinnowBoard。Windows 10物联网核心利用丰富的、可扩展的通用的Windows平台（UWP）API提供的解决方案。</p>
</blockquote>
<h4 id="框架"><a href="#框架" class="headerlink" title="框架"></a>框架</h4><ul>
<li><a href="https://allseenalliance.org/framework" target="_blank" rel="external">AllJoyn</a></li>
<li><a href="">Apple HomeKit</a></li>
<li><a href="">Countly IoT Analytics</a></li>
<li><a href="">Eclipse Smarthome</a></li>
<li><a href="">Iotivity</a></li>
<li><a href="">Kura</a></li>
<li><a href="">Gobot</a></li>
<li><a href="">Thingsboard</a></li>
</ul>
<h3 id="网络协议"><a href="#网络协议" class="headerlink" title="网络协议"></a>网络协议</h3><h4 id="物理层"><a href="#物理层" class="headerlink" title="物理层"></a>物理层</h4><h5 id="802-15-4-IEEE"><a href="#802-15-4-IEEE" class="headerlink" title=" - 802.15.4 (IEEE)"></a><img width="50" align="left" src="http://www.greenpeak.com/images/IEEE802154.jpg"> - <span id="802.15.4"><a href="https://en.wikipedia.org/wiki/IEEE_802.15.4" target="_blank" rel="external">802.15.4</a></span> (IEEE)</h5><blockquote>
<p>IEEE 802.15.4是用于低速无线个人域网(LR-WPAN)的物理层和媒体接入控制层规范标准。它由IEEE 802.15工作组维护，制定于2003年。</p>
<p>它是ZigBee、ISA100.11a、WirelessHART和MiWi规范的基础，上述协议通过对上层进一步开发对IEEE 802.15.4未定义的功能进行了扩展。同样地，该标准也可用于6LoWPAN和构建嵌入式无线网络的标准网络协议中。</p>
<p>IEEE 802.15.4标准旨为无线个人区域网络（WPAN）提供基础网络层，其关注的重点在于设备间低速率、低功耗的通信。它与需要高带宽和大功率的协议（例如wifi）形成了鲜明的对比例如wifi。其重点是在几乎没有底层设施的基础下实现设备间的低成本、低功耗通信。</p>
</blockquote>
<h5 id="Bluetooth-Bluetooth-Special-Interest-Group"><a href="#Bluetooth-Bluetooth-Special-Interest-Group" class="headerlink" title=" - Bluetooth (Bluetooth Special Interest Group)"></a><img width="50" align="left" src="https://upload.wikimedia.org/wikipedia/commons/thumb/f/fc/BluetoothLogo.svg/770px-BluetoothLogo.svg.png"> - <span id="Bluetooth"><a href="https://en.wikipedia.org/wiki/Bluetooth" target="_blank" rel="external">Bluetooth</a></span> (Bluetooth Special Interest Group)</h5><blockquote>
<p>蓝牙是一种无线技术标准，（使用2.4~2.485GHz的ISM波段的UHF无线电波）可实现固定设备、移动设备和个人局域网（PANs）之间的短距离数据交换。蓝牙技术最初由电信巨头爱立信公司于1994年创制，当时是作为RS232数据线的替代方案。蓝牙可连接多个设备，克服了数据同步的难题。</p>
<p>目前蓝牙由蓝牙技术联盟(Bluetooth Special Interest Group，简称SIG)管理，该技术联盟在全球拥有超过25,000家成员公司，它们分布在电信、计算机、网络、和消费电子等多重领域。</p>
</blockquote>
<h5 id="Bluetooth-Low-Energy-Bluetooth-Special-Interest-Group"><a href="#Bluetooth-Low-Energy-Bluetooth-Special-Interest-Group" class="headerlink" title=" - Bluetooth Low Energy (Bluetooth Special Interest Group)"></a><img width="50" align="left" src="https://upload.wikimedia.org/wikipedia/en/thumb/2/20/Bluetooth_Smart_Logo.svg/288px-Bluetooth_Smart_Logo.svg.png"> - <span id="Bluetooth Low Energy"><a href="https://en.wikipedia.org/wiki/Bluetooth_low_energy" target="_blank" rel="external">Bluetooth Low Energy</a></span> (Bluetooth Special Interest Group)</h5><blockquote>
<p>低功耗蓝牙技术（BLE让蓝牙技术更加智能）是专为无线个人区域网技术而设计，目前由蓝牙技术联盟管理，旨在用于医疗保健、健身、安全以及家庭娱乐等新型应用之中。- 维基百科</p>
<p>与经典蓝牙技术相比较，低功耗蓝牙技术目标是在保持大致相同通信范围下，大大降低功耗和成本。蓝牙技术联盟（Bluetooth SIG ）预测：到2018年，百分之九十以上具有蓝牙功能的智能手机将支持低功耗蓝牙技术。</p>
</blockquote>
<h5 id="EC-GSM-IoT-EC-GSM-IoT-Group"><a href="#EC-GSM-IoT-EC-GSM-IoT-Group" class="headerlink" title=" - EC-GSM-IoT (EC-GSM-IoT Group)"></a><img width="30" align="left" src="http://oj8s9k3s1.bkt.clouddn.com/gsma_logo_2x.png"> - <span id="EC-GSM-IoT"><a href="http://www.gsma.com/connectedliving/extended-coverage-gsm-internet-of-things-ec-gsm-iot/" target="_blank" rel="external">EC-GSM-IoT</a></span> (EC-GSM-IoT Group)</h5><blockquote>
<p>扩展覆盖GSM物联网（EC-GSM-IoT）是一个基于标准的低功耗广域技术。它是基于EGPRS和设计为一个大容量、长距离、低能耗和低复杂度的蜂窝系统的物联网通信。<br>EC-GSM-IoT网络试验已经开始，第一次商业发射计划在2017。所有主要的移动设备支持的芯片组和模块制造商，EC-GSM-IoT网络将与2G、3G、4G移动网络并存。它也将受益于所有的安全和隐私的移动网络功能，如支持用户身份保密，实体认证，保密性，数据完整性和移动设备识别。</p>
</blockquote>
<h5 id="LoRaWAN-LoRa-Alliance"><a href="#LoRaWAN-LoRa-Alliance" class="headerlink" title=" - LoRaWAN (LoRa Alliance)"></a><img width="50" align="left" src="http://www.taktilis.fr/wp-content/uploads/Lora.jpg"> - <span id="LoRaWAN"><a href="https://en.wikipedia.org/wiki/LoRaWAN" target="_blank" rel="external">LoRaWAN</a></span> (LoRa Alliance)</h5><blockquote>
<p>LoRaWAN广域网中允许连接对象之间的低比特率通信，因此可用于物联网、M2M（Machine-to-Machine ）以及智慧城市之中。- 维基百科</p>
<p>该技术由LoRa联盟制定。其最初由 Cycleo研发提出，该公司于2012年被 Semtech公司收购。LoRaWAN是 Long Range Wide-area network的缩写。</p>
</blockquote>
<h5 id="NB-IoT-3GPP"><a href="#NB-IoT-3GPP" class="headerlink" title="- NB-IoT (3GPP)"></a>- <span id="NB-IoT"><a href="https://en.wikipedia.org/wiki/NarrowBand_IOT" target="_blank" rel="external">NB-IoT</a></span> (3GPP)</h5><blockquote>
<p>蜂窝窄带物联网(NB-IoT)是一个低功耗广域网络无线技术，已经发展到使范围广泛的设备和服务将使用蜂窝电信带连接。</p>
<p>NB-IoT是一系列的移动物联网（表明）技术的第三代合作伙伴计划（3GPP）规范。</p>
</blockquote>
<h5 id="Sigfox-Sigfox"><a href="#Sigfox-Sigfox" class="headerlink" title=" - Sigfox (Sigfox)"></a><img width="50" align="left" src="http://oj8s9k3s1.bkt.clouddn.com/sigfox-log.jpeg"> - <span id="Sigfox"><a href="https://en.wikipedia.org/wiki/Sigfox" target="_blank" rel="external">Sigfox</a></span> (Sigfox)</h5><blockquote>
<p>Sigfox 协议为一家法国公司所有，其主要用于搭建如电表、智能手表、洗衣机等需要持续不断地传输少量数据的低功耗设备之间的无线网络。其基础结构决定了其可在物联网领域打出自己的一片天地。- 维基百科</p>
<p>Sigfox自称是“第一家也是唯一为物联网提供全球蜂窝连接的公司。”其基础设施完全独立于电信网络等现有网络。Sigfox目前正在寻求“部署数十亿对象和成千上万的新用途”的解决方案，以期完成处理由日常生活用品产生的PB级别的数据的长远目标。</p>
</blockquote>
<h5 id="Wi-Fi-Wi-Fi-Alliance"><a href="#Wi-Fi-Wi-Fi-Alliance" class="headerlink" title=" - Wi-Fi (Wi-Fi Alliance)"></a><img width="50" align="left" src="https://upload.wikimedia.org/wikipedia/commons/f/f8/Wi-FI_Alliance_Logo.png"> - <span id="Wi-Fi"><a href="https://en.wikipedia.org/wiki/Wi-Fi" target="_blank" rel="external">Wi-Fi</a></span> (Wi-Fi Alliance)</h5><blockquote>
<p>Wi-Fi （或WiFi）是一个允许电子设备接入网络的无线计算机局域网技术，主要采用 2.4G（12cm）UHF和5G（6cm）SHF ISM无线频段。 - 维基百科</p>
<p>Wi-Fi 联盟将WiFi定义为基于IEEE802.11协议的“无线局域网”（WLAN）产品。然而，WiFi一词已然成为了“WLAN”的同义词。“Wi-Fi”是Wi-Fi联盟的商标。“WiFi认证”的商标只能用在成功通过Wi-Fi联盟互操作性的认证测试产品之上。</p>
</blockquote>
<h4 id="网络层-传输层"><a href="#网络层-传输层" class="headerlink" title="网络层/传输层"></a>网络层/传输层</h4><h5 id="Rime-Contiki"><a href="#Rime-Contiki" class="headerlink" title="- Rime (Contiki)"></a>- <span id="Rime"><a href="http://www.contiki-os.org/" target="_blank" rel="external">Rime</a></span> (Contiki)</h5><blockquote>
<p>Rime是针对传感器网络轻量级、层次型协议栈，也是低功耗、无线网络协议栈，旨在简化传感器网络协议及代码重用，属于Contiki的一部分.他可以作为一个单独的私有无线协议网络存在，作为数据传输通道，也可以作为6lowpan、ipv4的底层载体。</p>
</blockquote>
<h5 id="6LowPan-IETF"><a href="#6LowPan-IETF" class="headerlink" title=" - 6LowPan (IETF)"></a><img width="50" align="left" src="http://www.tonex.com/wp-content/uploads/6lowpan.jpg"> - <span id="6LowPan"><a href="https://en.wikipedia.org/wiki/6LoWPAN" target="_blank" rel="external">6LowPan</a></span> (IETF)</h5><blockquote>
<p>6LoWPAN是基于IPv6的低功耗无线个域网络（IPv6 over Low power Wireless Personal Area Networks）的缩写。6LoWPAN还是IETF互联网领域中一个工作组的名称：IPv6 overLR-WPAN（简称6LowPan）工作组。-维基百科</p>
<p>6LoWPAN的概念源于“互联网协议可以并且应该适用于最小器件”。而且，处理能力有限的低功耗的设备应该能够参与到物联网中。6LoWPAN 工作组定义了封装和包头压缩机制，该机制允许在IEEE 802.15.4网路上发送和接收IPv6数据包。IPv4和 IPv6 是局域网、城域网和广域网（例如因特网）中数据传送的载体。同样地，IEEE 802.15.4 设备提供了在无线领域的传感通信的能力。然而，两者的内在本质完全不同。</p>
</blockquote>
<h5 id="Thread-Thread-Group"><a href="#Thread-Thread-Group" class="headerlink" title=" - Thread (Thread Group)"></a><img width="50" align="left" src="http://www.twice.com/sites/default/files/styles/blog_content/public/ThreadGroupLogo_4_3_0.jpg?itok=SmyKXf7r"> - <span id="Thread"><a href="http://threadgroup.org/" target="_blank" rel="external">Thread</a></span> (Thread Group)</h5><p><img src="http://oj8s9k3s1.bkt.clouddn.com/threadx.jpg" alt=""></p>
<blockquote>
<p>Thread 是一个基于简化版IPv6的网状网络协议，用于同一网络中的智能家居设备之间的相互通信。</p>
<p>2014年七月， Google Inc’s Nest 实验室宣布携手 Samsung、ARM Holdings、Freescale、Silicon实验室、Big Ass Fans 以及耶鲁大学工程成立工作组，以期通过提供 产品的Thread认证，使Thread成为一个新的行业标准。目前使用的协议是 ZigBee和低功耗蓝牙技术。同ZigBee 以及其他系统类似，Thread也使用了包含IEEE 802.15.4无线网通信协议的6LoWPAN。不过，Thread支持IP寻址、云访问和AES加密。统一网络中， Thread可支持超过250台设备。</p>
</blockquote>
<h5 id="ZigBee-ZigBee-Alliance"><a href="#ZigBee-ZigBee-Alliance" class="headerlink" title=" - ZigBee (ZigBee Alliance)"></a><img width="50" align="left" src="http://www.zenatik.com/img/cms/zigbee.png"> - <span id="ZigBee"><a href="https://en.wikipedia.org/wiki/ZigBee" target="_blank" rel="external">ZigBee</a></span> (ZigBee Alliance)</h5><blockquote>
<p>ZigBee是一种基于IEEE 802.15.4规范的高层通信协议，通过使用小型、低功耗的无线设备来创建个人区域网络。-维基百科</p>
<p>ZigBee 协议相比于蓝牙、WiFi等其他无线个人区域网（WPANs）更简单实用。该协议主要应用在短距离范围之内并且数据传输速率不高的各种电子设备之间，如无线照明开关、家用电表以及其他类似的个人或工业设备等。</p>
</blockquote>
<h5 id="Z-Wave-Z-Wave-Alliance"><a href="#Z-Wave-Z-Wave-Alliance" class="headerlink" title=" - Z-Wave (Z-Wave Alliance)"></a><img width="50" align="left" src="https://upload.wikimedia.org/wikipedia/commons/0/08/Z-Wave_logo.jpg"> - <span id="Z-Wave"><a href="http://www.z-wave.com/" target="_blank" rel="external">Z-Wave</a></span> (Z-Wave Alliance)</h5><blockquote>
<p>Z-Wave是一种新兴的基于射频的、低成本、低功耗、高可靠、适于网络的短距离无线通信技术。工作频带为908.42MHz(美国)~868.42MHz(欧洲)，采用FSK(BFSK/GFSK)调制方式，数据传输速率为9.6 kbps，信号的有效覆盖范围在室内是30m，室外可超过100m，适合于窄带宽应用场合。随着通信距离的增大，设备的复杂度、功耗以及系统成本都在增加，相对于现有的各种无线通信技术，Z-Wave技术将是最低功耗和最低成本的技术，有力地推动着低速率无线个人区域网.</p>
<p>Z-Wave技术最大限度地减少功率消耗，因此其适用于采用电池供电的设备。</p>
</blockquote>
<h4 id="应用层"><a href="#应用层" class="headerlink" title="应用层"></a>应用层</h4><h5 id="Google-RPC-gRPC"><a href="#Google-RPC-gRPC" class="headerlink" title="Google RPC (gRPC)"></a><span id="gRPC"><a href="http://www.grpc.io/" target="_blank" rel="external">Google RPC</a></span> (gRPC)</h5><blockquote>
<p>gRPC是一个高性能、通用的开源RPC框架，其由Google主要面向移动应用开发并基于HTTP2协议标准而设计，基于ProtoBuf序列化协议开发，且支持多种开发语言。gRPC提供了一种简单的方法来精确地定义服务和为iOS、Android和后台支持服务自动生成可靠性很强的客户端功能库。客户端充分利用高级流和链接功能，从而有助于节省带宽、降低TCP链接次数、节省CPU使用和电池寿命。</p>
</blockquote>
<h5 id="CoAP-IETF"><a href="#CoAP-IETF" class="headerlink" title="CoAP (IETF)"></a><span id="CoAP"><a href="http://coap.technology/" target="_blank" rel="external">CoAP</a></span> (IETF)</h5><p><img src="http://oj8s9k3s1.bkt.clouddn.com/coap.jpg" alt=""></p>
<blockquote>
<p>受限应用协议(CoAP)是一种软件协议，用于非常简单的电子设备中，使它们通过互联网实现交互通信。是一种应用层协议，它运行于UDP协议之上而不是像HTTP那样运行于TCP之上。CoAP协议非常的小巧，最小的数据包仅为4字节。</p>
<p>CoAP特别针对于小功率传感器、开关、阀门和其他需要通过标准因特网远程控制或监督的组件； 它也是应用层协议，专门用于资源受限网络设备，例如WSN节点。</p>
</blockquote>
<h5 id="DTLS-IETF"><a href="#DTLS-IETF" class="headerlink" title="DTLS (IETF)"></a><span id="DTLS"><a href="https://fr.wikipedia.org/wiki/Datagram_Transport_Layer_Security" target="_blank" rel="external">DTLS</a></span> (IETF)</h5><blockquote>
<p>数据包传输层安全（DTLS）通信协议为数据报协议提供通信的安全性。——维基百科</p>
<p>DTLS使得基于数据报的应用程序以如下方式进行通信：防窃听，篡改，或消息伪造。而DTLS协议为基于面向流的传输层安全（TLS）协议，并意在提供相同的安全保证。</p>
</blockquote>
<h5 id="Eddystone-Google"><a href="#Eddystone-Google" class="headerlink" title=" - Eddystone (Google)"></a><img width="50" align="left" src="https://cdn.arstechnica.net/wp-content/uploads/2015/07/2015-07-13_16-46-26.jpg"> - <span id="Eddystone"><a href="https://developers.google.com/beacons/" target="_blank" rel="external">Eddystone</a></span> (Google)</h5><blockquote>
<p>Eddystone是由谷歌在2015年7月发布的一款开源且跨平台的Beacon标准，它通过低能耗蓝牙Beacon格式，为用户提供位置信息和邻近数据。—— 维基百科</p>
<p>虽然Eddystone类似于苹果在2013年发布的iBeacon，但它可同时适用于Android和iOS，而iBeacon仅限于iOS平台。这两个软件的实际应用是，企业主可以根据他们智能手机的实时位置定位潜在客户。</p>
</blockquote>
<h5 id="HTTP-IETF"><a href="#HTTP-IETF" class="headerlink" title=" - HTTP (IETF)"></a><img width="50" align="left" src="http://www.httptechnology.com.au/logo.jpg"> - <span id="HTTP"><a href="https://en.wikipedia.org/wiki/Hypertext_Transfer_Protocol" target="_blank" rel="external">HTTP</a></span> (IETF)</h5><blockquote>
<p>超文本传输协议（HTTP）是用于分布式、协作式、超媒体信息系统的应用协议，也是万维网数据通信的基础。</p>
<p>HTTP的标准发展以互联网工程任务组（IETF）和万维网联盟（W3C）为协调，在发表一系列请求评议文档（RFC）后达到顶峰。HTTP / 1.1的第一个定义，即常用的HTTP版本，始于1997年的RFC 2068，虽然1999年在RFC 2616被废弃。</p>
<p>REST 指的是一组架构约束条件和原则。满足这些约束条件和原则的应用程序或设计就是 RESTful。<br>Web 应用程序最重要的 REST 原则是，客户端和服务器之间的交互在请求之间是无状态的。从客户端到服务器的每个请求都必须包含理解请求所必需的信息。如果服务器在请求之间的任何时间点重启，客户端不会得到通知。此外，无状态请求可以由任何可用服务器回答，这十分适合云计算之类的环境。客户端可以缓存数据以改进性能。</p>
</blockquote>
<h5 id="iBeacon-Apple"><a href="#iBeacon-Apple" class="headerlink" title=" - iBeacon (Apple)"></a><img width="50" align="left" src="https://developer.apple.com/ibeacon/images/ibeacon-logo.svg"> - <span id="iBeacon"><a href="https://en.wikipedia.org/wiki/IBeacon" target="_blank" rel="external">iBeacon</a></span> (Apple)</h5><blockquote>
<p>iBeacon是苹果公司标准化的协议，并在2013年的苹果全球开发者大会上正式发布。——维基百科</p>
<p>iBeacon采用低功耗蓝牙接近感应来发送兼容应用或操作系统的通用唯一标识符。该标识符可用来确定设备的物理位置，追踪客户，或触发设备上的基于位置的动作，例如可用来检查社交媒体或推送通知。</p>
</blockquote>
<h5 id="MQTT-IBM"><a href="#MQTT-IBM" class="headerlink" title=" - MQTT (IBM)"></a><img width="50" align="left" src="http://blog.thingstud.io/wp-content/uploads/mqttorg.png"> - <span id="MQTT"><a href="http://mqtt.org/" target="_blank" rel="external">MQTT</a></span> (IBM)</h5><p><img src="http://oj8s9k3s1.bkt.clouddn.com/MQTT.png" alt=""></p>
<blockquote>
<p>MQTT（MQ遥测传输）是一种“轻量级”发布-订阅式消息协议，主要用于TCP / IP协议之上。它专为连接网络带宽受限的远端地点。是IBM开发的一个即时通讯协议，有可能成为物联网的重要组成部分。该协议支持所有平台，几乎可以把所有联网物品和外部连接起来，被用来当做传感器和致动器（比如通过Twitter让房屋联网）的通信协议。</p>
</blockquote>
<h5 id="STOMP"><a href="#STOMP" class="headerlink" title=" - STOMP"></a><img width="50" align="left" src="https://stomp.github.io/images/project-logo.png"> - <span id="STOMP"><a href="https://stomp.github.io/" target="_blank" rel="external">STOMP</a></span></h5><blockquote>
<p>简单（或流）文本定向消息协议（STOMP），原名TTMP，是一个简单的基于文本的协议，专为面向消息的中间件（MOM）设计。——维基百科</p>
<p>STOMP提供了一个可互操作的连接格式，允许STOMP客户端与任何支持该协议的消息代理进行交互。它与语言无关，意为一种编程语言或平台开发的代理，可以从其他语言开发的客户端软件那里接收通信。</p>
</blockquote>
<h5 id="lt-Websocket"><a href="#lt-Websocket" class="headerlink" title=" - &lt;Websocket"></a><img width="50" align="left" src="https://www.rabbitmq.com/wp-uploads/2012/02/HTML5_Logo_256.png"> - &lt;<span id="Websocket"><a href="https://en.wikipedia.org/wiki/WebSocket" target="_blank" rel="external">Websocket</a></span></h5><blockquote>
<p>WebSocket是一种提供基于TCP连接的全双工通信的协议。——维基百科</p>
<p>WebSocket在web浏览器和网络服务器中实现，但也可用于任何客户端或服务器应用程序。 WebSocket协议是一个独立的基于TCP的协议，能够增加浏览器和网站的互动，有利于直播内容和实时游戏的创作。不需要客户端请求就能为服务器提供一个标准化的方式，来将内容发送到浏览器，同时考虑到保持连接打开时回传的消息。</p>
</blockquote>
<h5 id="XMPP-IETF"><a href="#XMPP-IETF" class="headerlink" title=" - XMPP (IETF)"></a><img width="50" align="left" src="https://upload.wikimedia.org/wikipedia/commons/9/95/XMPP_logo.svg"> - <span id="XMPP"><a href="https://en.wikipedia.org/wiki/XMPP" target="_blank" rel="external">XMPP</a></span> (IETF)</h5><blockquote>
<p>可扩展消息处理现场协议（XMPP）是一个基于XML（可扩展标记语言），面向消息中间件的通信协议。——维基百科</p>
<p>它促使任何两个或多个网络实体之间可扩展数据的准实时结构交换。因为可扩展，所以该协议也被用于发布-订阅系统、VoIP信令、视频、文件传输、游戏、诸如智能电网的物联网（IoT）应用，以及社交网络服务。</p>
</blockquote>
<h3 id="平台"><a href="#平台" class="headerlink" title="平台"></a>平台</h3><ul>
<li><a href="">Yeelink</a></li>
<li><a href="">SiteWhere</a></li>
<li><a href="">DeviceHive</a></li>
<li><a href="">Devicehub.net</a></li>
<li><a href="">LoraNet</a></li>
<li><a href="">IoT Toolkit</a></li>
<li><a href="">Mango</a></li>
<li><a href="">Nimbits</a></li>
<li><a href="">ThingSpeak</a></li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;一份物联网项目与资源的整理清单。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt; 物联网是新一代信息技术的重要组成部分，其英文名称是：“The Internet of things”。顾名思义，物联网就是物物相连的互联网。这有两层意思：其一，物联网的核心和基础仍然是互联网，是在互联网基础上的延伸和扩展的网络；其二，其用户端延伸和扩展到了任何物品与物品之间，进行信息交换和通信 也就是物物相息。物联网就是“物物相连的互联网”。&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
    
      <category term="iot" scheme="http://yoursite.com/tags/iot/"/>
    
  </entry>
  
</feed>
